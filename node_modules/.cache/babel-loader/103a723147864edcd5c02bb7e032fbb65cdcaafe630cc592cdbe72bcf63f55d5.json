{"ast":null,"code":"import React,{useState}from\"react\";import\"./Gameboard.css\";import{getRandomWord}from\"../../utilities/api\";import{createBoardState}from\"../../utilities/helpers\";import GuessRow from\"../GuessRow/GuessRow\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";export default function Gameboard(){// default starting guesses (rows) and letters (columnns):\nconst startingGuesses=6;const startingLetters=5;// object containing board evaluation key / value pairs: \nconst letterEvals={inactive:\"inactive\",rightLetter_RightPlace:\"rightLetter_RightPlace\",rightLetter_WrongPlace:\"rightLetter_WrongPlace\",wrongLetter_WrongPlace:\"wrongLetter_WrongPlace\"};// round status state values:\nconst roundStatuses={active:\"active\",won:\"won\",lost:\"lost\"};const roundStatusMessages={active:\"Guess the secret word!\",won:\"You won!\",lost:\"You lost!\"};// WordleFlex States:\n// letters in the answer:\nconst[keywordLetters,setKeywordLetters]=useState(startingLetters);// max guess attempts per round:\nconst[maxGuesses,setMaxGuesses]=useState(startingGuesses);// 2D array representing the guessed letters:\nconst[boardLetters,setBoardLetters]=useState(createBoardState(keywordLetters,maxGuesses,\"\"));// 2D array representing the evaluated guesses:' \nconst[boardEvaluated,setBoardEvaluated]=useState(createBoardState(keywordLetters,maxGuesses,letterEvals.inactive));// the answer:\nconst[keyword,setKeyword]=useState(getRandomWord(keywordLetters).toUpperCase());// attempt number:\nconst[guessNumber,setGuessNumber]=useState(0);// active guess: \nconst[guess,setGuess]=useState(\"\");// tracks whether the round is in progress, won, or lost:\nconst[roundStatus,setRoundStatus]=useState(roundStatuses.active);// text to display how many guesses the player has left, and if they won or lost\nconst[statusText,setStatusText]=useState(roundStatusMessages.active);// keywordLetters update event handler - gets a new keyword of a certain length, resets the board and restarts the game\nconst updateKeywordLetters=event=>{event.preventDefault();setKeywordLetters(Number(event.target.value));setKeyword(getRandomWord(Number(event.target.value)).toUpperCase());setBoardLetters(createBoardState(Number(event.target.value),maxGuesses,\"\"));setBoardEvaluated(createBoardState(Number(event.target.value),maxGuesses,letterEvals.inactive));setGuessNumber(0);setRoundStatus(roundStatuses.active);setStatusText(roundStatusMessages.active);};// maxGuesses update event handler - adds or subtracts guess rows from the board. resets the board and restarts the game\nconst updateMaxGuesses=event=>{event.preventDefault();setMaxGuesses(Number(event.target.value));setKeyword(getRandomWord(Number(event.target.value)).toUpperCase());setBoardLetters(createBoardState(keywordLetters,Number(event.target.value),\"\"));setBoardEvaluated(createBoardState(keywordLetters,Number(event.target.value),letterEvals.inactive));setGuessNumber(0);setRoundStatus(roundStatuses.active);setStatusText(roundStatusMessages.active);};// updateGuess event handler - capitalizes the user guess and logs the guess in state\nconst updateGuess=event=>{event.preventDefault();let string=event.target.value;string=string.toUpperCase();setGuess(string);};// Calculate Guess \nconst calculateGuess=event=>{event.preventDefault();// 1. Exit if the user is out of guesses, or round state is not active\nif(guessNumber===maxGuesses||roundStatus!==roundStatuses.active){return;}// 2. Update the letter state of the board \n// spread the guess into an Array:\nconst guessArray=[...guess];// create a deep copy of the 2D state, so we don't update state directly:\nconst newBoardLetters=boardLetters.map(row=>[...row]);// update the copy of the board state with the guess inserted:\nnewBoardLetters[guessNumber]=guessArray;// update the letter state of the board:\nsetBoardLetters(newBoardLetters);// 3. Evaluate the guess and update the evaluated state and guess number\nconst evaluatedArray=Array(keywordLetters);const keywordArray=Array.from(keyword);const newBoardEvaluated=boardEvaluated.map(row=>[...row]);guessArray.forEach((x,index)=>{if(x===keywordArray[index]){evaluatedArray[index]=letterEvals.rightLetter_RightPlace;}else if(keywordArray.some(y=>x===y)){evaluatedArray[index]=letterEvals.rightLetter_WrongPlace;}else evaluatedArray[index]=letterEvals.wrongLetter_WrongPlace;});newBoardEvaluated[guessNumber]=[...evaluatedArray];setBoardEvaluated(newBoardEvaluated);setGuessNumber(guessNumber+1);// 4. Check if the player won or lost and update the round status and status text\nif(evaluatedArray.every(x=>x===letterEvals.rightLetter_RightPlace)){setRoundStatus(roundStatuses.won);setStatusText(updateStatusText(roundStatuses.won));}else if(guessNumber+1===maxGuesses){setRoundStatus(roundStatus.lost,guessNumber+1);setStatusText(updateStatusText(roundStatuses.lost));}};const updateStatusText=status=>{switch(status){case roundStatuses.active:return\"Guess the word!\";case roundStatuses.won:return\"You won!\";case roundStatuses.lost:return\"You lost!\";}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"form\",{className:\"settings\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Letters:\"}),/*#__PURE__*/_jsx(\"input\",{id:\"LettersInput\",type:\"number\",min:4,max:8,value:keywordLetters,onChange:updateKeywordLetters}),/*#__PURE__*/_jsx(\"label\",{children:\"Guesses:\"}),/*#__PURE__*/_jsx(\"input\",{id:\"GuessesInput\",type:\"number\",min:2,max:8,value:maxGuesses,onChange:updateMaxGuesses})]}),/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:[...Array(maxGuesses).keys()].map(arg=>{return/*#__PURE__*/_jsx(GuessRow,{id:arg// tell GuessRow which ROW it is\n,keywordLetters:keywordLetters// tell GuessRow how many letters (COL) in the keyword\n,boardLetters:boardLetters// Allow GuessRow to pass the Letters their value\n,boardEvaluated:boardEvaluated// Allow GuessRow to pass the Letters their evaluation class\n},arg);})}),/*#__PURE__*/_jsxs(\"form\",{className:\"guess\",onSubmit:calculateGuess,children:[/*#__PURE__*/_jsx(\"label\",{children:\"Guess:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",minLength:keywordLetters,maxLength:keywordLetters,onChange:updateGuess}),/*#__PURE__*/_jsx(\"input\",{type:\"submit\",value:\"Guess\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"statusInfo\",children:/*#__PURE__*/_jsx(\"h2\",{children:statusText})})]});}","map":{"version":3,"names":["React","useState","getRandomWord","createBoardState","GuessRow","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Gameboard","startingGuesses","startingLetters","letterEvals","inactive","rightLetter_RightPlace","rightLetter_WrongPlace","wrongLetter_WrongPlace","roundStatuses","active","won","lost","roundStatusMessages","keywordLetters","setKeywordLetters","maxGuesses","setMaxGuesses","boardLetters","setBoardLetters","boardEvaluated","setBoardEvaluated","keyword","setKeyword","toUpperCase","guessNumber","setGuessNumber","guess","setGuess","roundStatus","setRoundStatus","statusText","setStatusText","updateKeywordLetters","event","preventDefault","Number","target","value","updateMaxGuesses","updateGuess","string","calculateGuess","guessArray","newBoardLetters","map","row","evaluatedArray","Array","keywordArray","from","newBoardEvaluated","forEach","x","index","some","y","every","updateStatusText","status","children","className","id","type","min","max","onChange","keys","arg","onSubmit","minLength","maxLength"],"sources":["/Users/mattmogan/Desktop/Projects/WordleFlex/src/components/Gameboard/Gameboard.jsx"],"sourcesContent":["import React, {useState} from \"react\";\nimport \"./Gameboard.css\"; \nimport {getRandomWord} from \"../../utilities/api\"\nimport {createBoardState} from \"../../utilities/helpers\"\nimport GuessRow from \"../GuessRow/GuessRow\"\n\nexport default function Gameboard(){\n    \n    // default starting guesses (rows) and letters (columnns):\n    const startingGuesses = 6 \n    const startingLetters = 5\n    // object containing board evaluation key / value pairs: \n    const letterEvals = {  \n        inactive: \"inactive\", \n        rightLetter_RightPlace: \"rightLetter_RightPlace\",\n        rightLetter_WrongPlace: \"rightLetter_WrongPlace\",\n        wrongLetter_WrongPlace: \"wrongLetter_WrongPlace\"\n    }  \n    // round status state values:\n    const roundStatuses = {\n        active: \"active\",\n        won: \"won\",\n        lost: \"lost\"\n    }\n    const roundStatusMessages = {\n        active: \"Guess the secret word!\",\n        won: \"You won!\",\n        lost: \"You lost!\"\n    }\n\n\n    // WordleFlex States:\n\n    // letters in the answer:\n    const [keywordLetters, setKeywordLetters] = useState(startingLetters) \n    // max guess attempts per round:\n    const [maxGuesses, setMaxGuesses] = useState(startingGuesses)\n    // 2D array representing the guessed letters:\n    const [boardLetters, setBoardLetters] = useState(createBoardState(keywordLetters,maxGuesses,\"\")) \n    // 2D array representing the evaluated guesses:' \n    const [boardEvaluated, setBoardEvaluated] = useState(createBoardState(keywordLetters,maxGuesses,letterEvals.inactive)) \n    // the answer:\n    const [keyword, setKeyword] = useState(getRandomWord(keywordLetters).toUpperCase()) \n    // attempt number:\n    const [guessNumber, setGuessNumber] = useState(0) \n    // active guess: \n    const [guess, setGuess] = useState(\"\") \n    // tracks whether the round is in progress, won, or lost:\n    const [roundStatus, setRoundStatus] = useState(roundStatuses.active)\n    // text to display how many guesses the player has left, and if they won or lost\n    const [statusText, setStatusText] = useState(roundStatusMessages.active)\n    \n    // keywordLetters update event handler - gets a new keyword of a certain length, resets the board and restarts the game\n\n    const updateKeywordLetters = (event) => {\n        event.preventDefault()\n        setKeywordLetters(Number(event.target.value))\n        setKeyword(getRandomWord(Number(event.target.value)).toUpperCase())\n        setBoardLetters(createBoardState(Number(event.target.value),maxGuesses,\"\"))\n        setBoardEvaluated(createBoardState(Number(event.target.value),maxGuesses,letterEvals.inactive))\n        setGuessNumber(0)\n        setRoundStatus(roundStatuses.active)\n        setStatusText(roundStatusMessages.active)\n    }\n\n    // maxGuesses update event handler - adds or subtracts guess rows from the board. resets the board and restarts the game\n\n    const updateMaxGuesses = (event) => {\n        event.preventDefault()\n        setMaxGuesses(Number(event.target.value)) \n        setKeyword(getRandomWord(Number(event.target.value)).toUpperCase())\n        setBoardLetters(createBoardState(keywordLetters,Number(event.target.value),\"\"))\n        setBoardEvaluated(createBoardState(keywordLetters,Number(event.target.value),letterEvals.inactive))\n        setGuessNumber(0) \n        setRoundStatus(roundStatuses.active)        \n        setStatusText(roundStatusMessages.active)\n    }\n\n    // updateGuess event handler - capitalizes the user guess and logs the guess in state\n\n    const updateGuess = (event) => {\n        event.preventDefault()\n        let string = event.target.value\n        string = string.toUpperCase()\n        setGuess(string)\n    }\n\n    // Calculate Guess \n\n    const calculateGuess = (event) => {\n        \n        event.preventDefault()\n        \n        // 1. Exit if the user is out of guesses, or round state is not active\n        \n        if(guessNumber === maxGuesses || roundStatus !== roundStatuses.active ){\n            return \n        }\n\n        // 2. Update the letter state of the board \n        \n        // spread the guess into an Array:\n        const guessArray = [...guess] \n        // create a deep copy of the 2D state, so we don't update state directly:\n        const newBoardLetters = boardLetters.map(row => [...row]) \n        // update the copy of the board state with the guess inserted:\n        newBoardLetters[guessNumber] = guessArray \n        // update the letter state of the board:\n        setBoardLetters(newBoardLetters) \n\n        // 3. Evaluate the guess and update the evaluated state and guess number\n        \n        const evaluatedArray = Array(keywordLetters)\n        const keywordArray = Array.from(keyword)\n        const newBoardEvaluated = boardEvaluated.map(row => [...row])\n        guessArray.forEach((x,index) => {\n            if (x === keywordArray[index]) {\n                evaluatedArray[index] = letterEvals.rightLetter_RightPlace\n            } else if (keywordArray.some(y => x === y)) {\n                evaluatedArray[index] = letterEvals.rightLetter_WrongPlace\n            } else \n               evaluatedArray[index] = letterEvals.wrongLetter_WrongPlace         \n        })\n        newBoardEvaluated[guessNumber] = [...evaluatedArray] \n        setBoardEvaluated(newBoardEvaluated) \n        setGuessNumber(guessNumber+1) \n\n        // 4. Check if the player won or lost and update the round status and status text\n\n        if(evaluatedArray.every((x) => x === letterEvals.rightLetter_RightPlace)){\n            setRoundStatus(roundStatuses.won) \n            setStatusText(updateStatusText(roundStatuses.won))\n        } else if (guessNumber+1 === maxGuesses) {\n            setRoundStatus(roundStatus.lost, guessNumber+1)\n            setStatusText(updateStatusText(roundStatuses.lost))\n        }\n\n    }\n\n    const updateStatusText = (status) => {\n        switch(status) {\n            case roundStatuses.active:\n                return \"Guess the word!\"\n            case roundStatuses.won:\n                return \"You won!\"\n            case roundStatuses.lost:\n                return \"You lost!\"\n        }\n    }\n\n    return (\n        <>\n        <form className=\"settings\">\n            <label>Letters:</label>\n            <input \n                id=\"LettersInput\" \n                type=\"number\" \n                min={4} \n                max={8}\n                value={keywordLetters}\n                onChange={updateKeywordLetters}\n            />\n            <label>Guesses:</label>\n            <input \n                id=\"GuessesInput\" \n                type=\"number\" \n                min={2} \n                max={8}\n                value={maxGuesses}\n                onChange={updateMaxGuesses}\n            />\n        </form>\n        <div className=\"container\">    \n           {[...Array(maxGuesses).keys()].map((arg) => {\n            return(\n                <GuessRow\n                    key = {arg}\n                    id = {arg} // tell GuessRow which ROW it is\n                    keywordLetters = {keywordLetters} // tell GuessRow how many letters (COL) in the keyword\n                    boardLetters = {boardLetters} // Allow GuessRow to pass the Letters their value\n                    boardEvaluated = {boardEvaluated} // Allow GuessRow to pass the Letters their evaluation class\n                />\n            )\n           })}\n        </div>\n        <form className=\"guess\" onSubmit={calculateGuess}>\n            <label>Guess:</label>\n            <input \n                type=\"text\" \n                minLength={keywordLetters} \n                maxLength={keywordLetters}\n                onChange={updateGuess}\n            />\n            <input \n                type=\"submit\" \n                value=\"Guess\"\n            />\n        </form>\n        <div className=\"statusInfo\">\n           <h2>{statusText}</h2>\n        </div>\n        </>\n    )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}