{"ast":null,"code":"var _jsxFileName = \"/Users/mattmogan/Desktop/Projects/WordleFlex/src/components/Gameboard/Gameboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Gameboard.css\";\nimport { getRandomWord } from \"../../utilities/api\";\nimport { createBoardState } from \"../../utilities/helpers\";\nimport GuessRow from \"../GuessRow/GuessRow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Gameboard() {\n  _s();\n  // WordleFlex states \n\n  const [keywordLetters, setkeywordLetters] = useState(5);\n  // minimum 3, maximum 8 - letters in the keyword\n  const [keyword, setKeyword] = useState(getRandomWord(5));\n  // this is the word the player is guessing\n  const [guessNumber, setGuessNumber] = useState(1);\n  // this tracks which guess we are on in the game. used to update the guess rows once a guess is evaluated, and check whether the game ends after 5 guesses \n  const [maxGuesses, setMaxGuesses] = useState(5);\n  // players cannot change this, but set to a state variable for future scalability and flexibility\n  const [guess, setGuess] = useState(\"\");\n  // the guess that the player enters, gets updated by the guess form\n  const [boardState, setBoardState] = useState(createBoardState());\n  // running tally of the guesses across the whole round\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [...Array(maxGuesses).keys()].map(arg => {\n      return /*#__PURE__*/_jsxDEV(GuessRow, {\n        id: arg,\n        keywordLetters: keywordLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n_s(Gameboard, \"Tnb7RVUOVBoj1nz9zl6sgXhAudM=\");\n_c = Gameboard;\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["React","useState","getRandomWord","createBoardState","GuessRow","jsxDEV","_jsxDEV","Gameboard","_s","keywordLetters","setkeywordLetters","keyword","setKeyword","guessNumber","setGuessNumber","maxGuesses","setMaxGuesses","guess","setGuess","boardState","setBoardState","className","children","Array","keys","map","arg","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mattmogan/Desktop/Projects/WordleFlex/src/components/Gameboard/Gameboard.jsx"],"sourcesContent":["import React, {useState} from \"react\";\nimport \"./Gameboard.css\"; \nimport {getRandomWord} from \"../../utilities/api\"\nimport {createBoardState} from \"../../utilities/helpers\"\nimport GuessRow from \"../GuessRow/GuessRow\"\n\nexport default function Gameboard(){\n    \n    // WordleFlex states \n    \n    const [keywordLetters, setkeywordLetters] = useState(5) \n    // minimum 3, maximum 8 - letters in the keyword\n    const [keyword, setKeyword] = useState(getRandomWord(5)) \n    // this is the word the player is guessing\n    const [guessNumber, setGuessNumber] = useState(1) \n    // this tracks which guess we are on in the game. used to update the guess rows once a guess is evaluated, and check whether the game ends after 5 guesses \n    const [maxGuesses, setMaxGuesses] = useState(5) \n    // players cannot change this, but set to a state variable for future scalability and flexibility\n    const [guess, setGuess] = useState(\"\")    \n    // the guess that the player enters, gets updated by the guess form\n    const [boardState, setBoardState] = useState(createBoardState())\n    // running tally of the guesses across the whole round\n\n    return (\n        <div className=\"container\">    \n           {[...Array(maxGuesses).keys()].map((arg) => {\n            return(\n                <GuessRow\n                    id = {arg}\n                    keywordLetters = {keywordLetters} \n                />\n            )\n           })}\n        </div>  \n    )\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAO,iBAAiB;AACxB,SAAQC,aAAa,QAAO,qBAAqB;AACjD,SAAQC,gBAAgB,QAAO,yBAAyB;AACxD,OAAOC,QAAQ,MAAM,sBAAsB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3C,eAAe,SAASC,SAASA,CAAA,EAAE;EAAAC,EAAA;EAE/B;;EAEA,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACvD;EACA,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAACC,aAAa,CAAC,CAAC,CAAC,CAAC;EACxD;EACA,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACjD;EACA,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EAC/C;EACA,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACtC;EACA,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAACE,gBAAgB,CAAC,CAAC,CAAC;EAChE;;EAEA,oBACIG,OAAA;IAAKe,SAAS,EAAC,WAAW;IAAAC,QAAA,EACtB,CAAC,GAAGC,KAAK,CAACR,UAAU,CAAC,CAACS,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAEC,GAAG,IAAK;MAC3C,oBACIpB,OAAA,CAACF,QAAQ;QACLuB,EAAE,EAAID,GAAI;QACVjB,cAAc,EAAIA;MAAe;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpC,CAAC;IAEP,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACvB,EAAA,CA7BuBD,SAAS;AAAAyB,EAAA,GAATzB,SAAS;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}