{"ast":null,"code":"var _jsxFileName = \"/Users/mattmogan/Desktop/Projects/WordleFlex/src/components/Gameboard/Gameboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Gameboard.css\";\nimport { getRandomWord } from \"../../utilities/api\";\nimport { createBoardState } from \"../../utilities/helpers\";\nimport GuessRow from \"../GuessRow/GuessRow\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Gameboard() {\n  _s();\n  const startingGuesses = 6;\n  const startingLetters = 5;\n\n  // WordleFlex states\n\n  const [keywordLetters, setKeywordLetters] = useState(startingLetters); // letters in the answer\n  const [maxGuesses, setMaxGuesses] = useState(startingGuesses); // max attempts\n\n  const [keyword, setKeyword] = useState(getRandomWord(keywordLetters)); // the answer\n  const [guessNumber, setGuessNumber] = useState(0); // attempt number\n  const [guess, setGuess] = useState(\"\"); // active guess \n\n  const [boardLetters, setBoardLetters] = useState(createBoardState(keywordLetters, maxGuesses, \"\")); // running tally of the guesses across the whole round\n  const [boardEvaluated, setBoardEvaluated] = useState(createBoardState(keywordLetters, maxGuesses, \"IA\")); // evaluated version of the board. RR = right letter, right place. RW = right letter, wrong place, WW = wrong letter, wrongplace, IA = inactive\n\n  // keywordLetters update event handler:\n\n  const updateKeywordLetters = event => {\n    event.preventDefault();\n    setKeywordLetters(Number(event.target.value));\n  };\n  useEffect(() => {\n    // reset game after keyword letters change\n    setKeyword(getRandomWord(keywordLetters)); // reset keyword\n    setBoardLetters(createBoardState(keywordLetters, maxGuesses, \"\")); // reset boardstate\n    setGuessNumber(0); // reset guess number\n  }, [keywordLetters]);\n\n  // maxGuesses update event handler:\n\n  const updateMaxGuesses = event => {\n    event.preventDefault();\n    setMaxGuesses(Number(event.target.value)); // reset max guesses\n  };\n  useEffect(() => {\n    setBoardLetters(createBoardState(keywordLetters, maxGuesses, \"\")); // reset boardstate\n    setGuessNumber(0); // reset guess number\n  }, [maxGuesses]);\n\n  // updateGuess event handler\n\n  const updateGuess = event => {\n    event.preventDefault();\n    setGuess(event.target.value);\n  };\n  const calculateGuess = event => {\n    event.preventDefault();\n    if (guessNumber === maxGuesses) {\n      return; // exit if user is out of guesses\n    }\n    const guessArray = [...guess]; // spread the guess into an Array\n    const newState = [...boardLetters]; // create a copy of the state, so we don't update state directly\n    newState[guessNumber] = guessArray; // update the copy of the board state with the guess inserted       \n\n    // evaluate the guess\n\n    guessArray.forEach((x, index) => {\n      if (x === Array.from(keyword)[index]) {}\n    });\n    setBoardLetters(newState); // update the letter state of the board\n    setGuessNumber(guessNumber + 1); // update the guess number\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [...Array(maxGuesses).keys()].map(arg => {\n        return /*#__PURE__*/_jsxDEV(GuessRow, {\n          id: arg,\n          keywordLetters: keywordLetters\n        }, arg, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"settings\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Letters:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"LettersInput\",\n        type: \"number\",\n        min: 4,\n        max: 8,\n        value: keywordLetters,\n        onChange: updateKeywordLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Guesses:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"GuessesInput\",\n        type: \"number\",\n        min: 2,\n        max: 8,\n        value: maxGuesses,\n        onChange: updateMaxGuesses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"guess\",\n      onSubmit: calculateGuess,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Guess:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        minLength: keywordLetters,\n        maxLength: keywordLetters,\n        onChange: updateGuess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Gameboard, \"CLrN09UTup+YTtnyu/1sTUIMlDc=\");\n_c = Gameboard;\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["React","useState","useEffect","getRandomWord","createBoardState","GuessRow","jsxDEV","_jsxDEV","Fragment","_Fragment","Gameboard","_s","startingGuesses","startingLetters","keywordLetters","setKeywordLetters","maxGuesses","setMaxGuesses","keyword","setKeyword","guessNumber","setGuessNumber","guess","setGuess","boardLetters","setBoardLetters","boardEvaluated","setBoardEvaluated","updateKeywordLetters","event","preventDefault","Number","target","value","updateMaxGuesses","updateGuess","calculateGuess","guessArray","newState","forEach","x","index","Array","from","children","className","keys","map","arg","id","fileName","_jsxFileName","lineNumber","columnNumber","type","min","max","onChange","onSubmit","minLength","maxLength","_c","$RefreshReg$"],"sources":["/Users/mattmogan/Desktop/Projects/WordleFlex/src/components/Gameboard/Gameboard.jsx"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport \"./Gameboard.css\"; \nimport {getRandomWord} from \"../../utilities/api\"\nimport {createBoardState} from \"../../utilities/helpers\"\nimport GuessRow from \"../GuessRow/GuessRow\"\n\nexport default function Gameboard(){\n    \n    const startingGuesses = 6\n    const startingLetters = 5\n\n    // WordleFlex states\n\n    const [keywordLetters, setKeywordLetters] = useState(startingLetters) // letters in the answer\n    const [maxGuesses, setMaxGuesses] = useState(startingGuesses) // max attempts\n\n    const [keyword, setKeyword] = useState(getRandomWord(keywordLetters)) // the answer\n    const [guessNumber, setGuessNumber] = useState(0) // attempt number\n    const [guess, setGuess] = useState(\"\") // active guess \n\n    const [boardLetters, setBoardLetters] = useState(createBoardState(keywordLetters,maxGuesses,\"\")) // running tally of the guesses across the whole round\n    const [boardEvaluated, setBoardEvaluated] = useState(createBoardState(keywordLetters,maxGuesses,\"IA\")) // evaluated version of the board. RR = right letter, right place. RW = right letter, wrong place, WW = wrong letter, wrongplace, IA = inactive\n\n    // keywordLetters update event handler:\n\n    const updateKeywordLetters = (event) => {\n        event.preventDefault()\n        setKeywordLetters(Number(event.target.value))\n    }\n    useEffect(() => { // reset game after keyword letters change\n        setKeyword(getRandomWord(keywordLetters)) // reset keyword\n        setBoardLetters(createBoardState(keywordLetters,maxGuesses,\"\")) // reset boardstate\n        setGuessNumber(0) // reset guess number\n    }, [keywordLetters])\n\n    // maxGuesses update event handler:\n\n    const updateMaxGuesses = (event) => {\n        event.preventDefault()\n        setMaxGuesses(Number(event.target.value)) // reset max guesses\n    }\n    useEffect( () => {\n        setBoardLetters(createBoardState(keywordLetters,maxGuesses,\"\")) // reset boardstate\n        setGuessNumber(0) // reset guess number\n    },[maxGuesses])\n\n    // updateGuess event handler\n\n    const updateGuess = (event) => {\n        event.preventDefault()\n        setGuess(event.target.value)\n    }\n\n    const calculateGuess = (event) => {\n        event.preventDefault()\n        if(guessNumber === maxGuesses){\n            return // exit if user is out of guesses\n        }\n        const guessArray = [...guess] // spread the guess into an Array\n        const newState = [...boardLetters] // create a copy of the state, so we don't update state directly\n        newState[guessNumber] = guessArray // update the copy of the board state with the guess inserted       \n        \n        // evaluate the guess\n        \n        guessArray.forEach((x,index) => {\n            if (x === Array.from(keyword)[index]) {\n\n            }            \n        })\n\n        setBoardLetters(newState) // update the letter state of the board\n        setGuessNumber(guessNumber+1) // update the guess number\n\n\n    }\n\n    return (\n        <>\n        <div className=\"container\">    \n           {[...Array(maxGuesses).keys()].map((arg) => {\n            return(\n                <GuessRow\n                    key = {arg}\n                    id = {arg}\n                    keywordLetters = {keywordLetters} \n                />\n            )\n           })}\n        </div>\n        <form className=\"settings\">\n            <label>Letters:</label>\n            <input \n                id=\"LettersInput\" \n                type=\"number\" \n                min={4} \n                max={8}\n                value={keywordLetters}\n                onChange={updateKeywordLetters}\n            />\n            <label>Guesses:</label>\n            <input \n                id=\"GuessesInput\" \n                type=\"number\" \n                min={2} \n                max={8}\n                value={maxGuesses}\n                onChange={updateMaxGuesses}\n            />\n        </form>\n        <form className=\"guess\" onSubmit={calculateGuess}>\n            <label>Guess:</label>\n            <input \n                type=\"text\" \n                minLength={keywordLetters} \n                maxLength={keywordLetters}\n                onChange={updateGuess}\n            />\n            <input \n                type=\"submit\" \n                value=\"Guess\"\n            />\n        </form>\n        </>\n    )\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,OAAO,iBAAiB;AACxB,SAAQC,aAAa,QAAO,qBAAqB;AACjD,SAAQC,gBAAgB,QAAO,yBAAyB;AACxD,OAAOC,QAAQ,MAAM,sBAAsB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE3C,eAAe,SAASC,SAASA,CAAA,EAAE;EAAAC,EAAA;EAE/B,MAAMC,eAAe,GAAG,CAAC;EACzB,MAAMC,eAAe,GAAG,CAAC;;EAEzB;;EAEA,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAACY,eAAe,CAAC,EAAC;EACtE,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAACW,eAAe,CAAC,EAAC;;EAE9D,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAACE,aAAa,CAACW,cAAc,CAAC,CAAC,EAAC;EACtE,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAAC,CAAC,CAAC,EAAC;EAClD,MAAM,CAACqB,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC,EAAC;;EAEvC,MAAM,CAACuB,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAACG,gBAAgB,CAACU,cAAc,EAACE,UAAU,EAAC,EAAE,CAAC,CAAC,EAAC;EACjG,MAAM,CAACU,cAAc,EAAEC,iBAAiB,CAAC,GAAG1B,QAAQ,CAACG,gBAAgB,CAACU,cAAc,EAACE,UAAU,EAAC,IAAI,CAAC,CAAC,EAAC;;EAEvG;;EAEA,MAAMY,oBAAoB,GAAIC,KAAK,IAAK;IACpCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtBf,iBAAiB,CAACgB,MAAM,CAACF,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC;EACjD,CAAC;EACD/B,SAAS,CAAC,MAAM;IAAE;IACdiB,UAAU,CAAChB,aAAa,CAACW,cAAc,CAAC,CAAC,EAAC;IAC1CW,eAAe,CAACrB,gBAAgB,CAACU,cAAc,EAACE,UAAU,EAAC,EAAE,CAAC,CAAC,EAAC;IAChEK,cAAc,CAAC,CAAC,CAAC,EAAC;EACtB,CAAC,EAAE,CAACP,cAAc,CAAC,CAAC;;EAEpB;;EAEA,MAAMoB,gBAAgB,GAAIL,KAAK,IAAK;IAChCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtBb,aAAa,CAACc,MAAM,CAACF,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC,EAAC;EAC9C,CAAC;EACD/B,SAAS,CAAE,MAAM;IACbuB,eAAe,CAACrB,gBAAgB,CAACU,cAAc,EAACE,UAAU,EAAC,EAAE,CAAC,CAAC,EAAC;IAChEK,cAAc,CAAC,CAAC,CAAC,EAAC;EACtB,CAAC,EAAC,CAACL,UAAU,CAAC,CAAC;;EAEf;;EAEA,MAAMmB,WAAW,GAAIN,KAAK,IAAK;IAC3BA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtBP,QAAQ,CAACM,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC;EAChC,CAAC;EAED,MAAMG,cAAc,GAAIP,KAAK,IAAK;IAC9BA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,IAAGV,WAAW,KAAKJ,UAAU,EAAC;MAC1B,OAAM,CAAC;IACX;IACA,MAAMqB,UAAU,GAAG,CAAC,GAAGf,KAAK,CAAC,EAAC;IAC9B,MAAMgB,QAAQ,GAAG,CAAC,GAAGd,YAAY,CAAC,EAAC;IACnCc,QAAQ,CAAClB,WAAW,CAAC,GAAGiB,UAAU,EAAC;;IAEnC;;IAEAA,UAAU,CAACE,OAAO,CAAC,CAACC,CAAC,EAACC,KAAK,KAAK;MAC5B,IAAID,CAAC,KAAKE,KAAK,CAACC,IAAI,CAACzB,OAAO,CAAC,CAACuB,KAAK,CAAC,EAAE,CAEtC;IACJ,CAAC,CAAC;IAEFhB,eAAe,CAACa,QAAQ,CAAC,EAAC;IAC1BjB,cAAc,CAACD,WAAW,GAAC,CAAC,CAAC,EAAC;EAGlC,CAAC;EAED,oBACIb,OAAA,CAAAE,SAAA;IAAAmC,QAAA,gBACArC,OAAA;MAAKsC,SAAS,EAAC,WAAW;MAAAD,QAAA,EACtB,CAAC,GAAGF,KAAK,CAAC1B,UAAU,CAAC,CAAC8B,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAEC,GAAG,IAAK;QAC3C,oBACIzC,OAAA,CAACF,QAAQ;UAEL4C,EAAE,EAAID,GAAI;UACVlC,cAAc,EAAIA;QAAe,GAF1BkC,GAAG;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGb,CAAC;MAEP,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACN9C,OAAA;MAAMsC,SAAS,EAAC,UAAU;MAAAD,QAAA,gBACtBrC,OAAA;QAAAqC,QAAA,EAAO;MAAQ;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACvB9C,OAAA;QACI0C,EAAE,EAAC,cAAc;QACjBK,IAAI,EAAC,QAAQ;QACbC,GAAG,EAAE,CAAE;QACPC,GAAG,EAAE,CAAE;QACPvB,KAAK,EAAEnB,cAAe;QACtB2C,QAAQ,EAAE7B;MAAqB;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,eACF9C,OAAA;QAAAqC,QAAA,EAAO;MAAQ;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACvB9C,OAAA;QACI0C,EAAE,EAAC,cAAc;QACjBK,IAAI,EAAC,QAAQ;QACbC,GAAG,EAAE,CAAE;QACPC,GAAG,EAAE,CAAE;QACPvB,KAAK,EAAEjB,UAAW;QAClByC,QAAQ,EAAEvB;MAAiB;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACP9C,OAAA;MAAMsC,SAAS,EAAC,OAAO;MAACa,QAAQ,EAAEtB,cAAe;MAAAQ,QAAA,gBAC7CrC,OAAA;QAAAqC,QAAA,EAAO;MAAM;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACrB9C,OAAA;QACI+C,IAAI,EAAC,MAAM;QACXK,SAAS,EAAE7C,cAAe;QAC1B8C,SAAS,EAAE9C,cAAe;QAC1B2C,QAAQ,EAAEtB;MAAY;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC,eACF9C,OAAA;QACI+C,IAAI,EAAC,QAAQ;QACbrB,KAAK,EAAC;MAAO;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA,eACL,CAAC;AAEX;AAAC1C,EAAA,CAtHuBD,SAAS;AAAAmD,EAAA,GAATnD,SAAS;AAAA,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}