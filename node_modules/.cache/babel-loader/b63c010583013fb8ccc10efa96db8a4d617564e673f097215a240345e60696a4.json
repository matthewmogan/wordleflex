{"ast":null,"code":"var _jsxFileName = \"/Users/mattmogan/Desktop/Projects/WordleFlex/src/components/Gameboard/Gameboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Gameboard.css\";\nimport { getRandomWord } from \"../../utilities/api\";\nimport { createBoardState } from \"../../utilities/helpers\";\nimport GuessRow from \"../GuessRow/GuessRow\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Gameboard() {\n  _s();\n  // WordleFlex states \n\n  const startingGuesses = 6;\n  const startingLetters = 5;\n  const [keywordLetters, setKeywordLetters] = useState(startingLetters);\n  // minimum 3, maximum 8 - letters in the keyword\n  const [keyword, setKeyword] = useState(getRandomWord(5));\n  // this is the word the player is guessing\n  const [guessNumber, setGuessNumber] = useState(0);\n  // this tracks which guess we are on in the game. used to update the guess rows once a guess is evaluated, and check whether the game ends after 5 guesses \n  const [maxGuesses, setMaxGuesses] = useState(startingGuesses);\n  // players cannot change this, but set to a state variable for future scalability and flexibility\n  const [guess, setGuess] = useState(\"\");\n  // the guess that the player enters, gets updated by the guess form\n  const [boardState, setBoardState] = useState(createBoardState(keywordLetters, maxGuesses));\n  // running tally of the guesses across the whole round\n\n  const updateLetters = event => {\n    event.preventDefault();\n    setKeywordLetters(Number(event.target.value));\n  };\n  const updateGuesses = event => {\n    event.preventDefault();\n    setMaxGuesses(Number(event.target.value));\n  };\n  const submitGuess = event => {\n    event.preventDefault();\n    console.log(\"guess\");\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [...Array(maxGuesses).keys()].map(arg => {\n        return /*#__PURE__*/_jsxDEV(GuessRow, {\n          id: arg,\n          keywordLetters: keywordLetters\n        }, arg, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"settings\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Letters:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"LettersInput\",\n        type: \"number\",\n        min: 4,\n        max: 8,\n        value: keywordLetters,\n        onChange: updateLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Guesses:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"GuessesInput\",\n        type: \"number\",\n        min: 2,\n        max: 8,\n        value: maxGuesses,\n        onChange: updateGuesses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"guess\",\n      onSubmit: submitGuess,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Guess:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        minLength: keywordLetters,\n        maxLength: keywordLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Gameboard, \"TZdrax4vzfZZhxUWWvtSdbp+dZc=\");\n_c = Gameboard;\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["React","useState","getRandomWord","createBoardState","GuessRow","jsxDEV","_jsxDEV","Fragment","_Fragment","Gameboard","_s","startingGuesses","startingLetters","keywordLetters","setKeywordLetters","keyword","setKeyword","guessNumber","setGuessNumber","maxGuesses","setMaxGuesses","guess","setGuess","boardState","setBoardState","updateLetters","event","preventDefault","Number","target","value","updateGuesses","submitGuess","console","log","children","className","Array","keys","map","arg","id","fileName","_jsxFileName","lineNumber","columnNumber","type","min","max","onChange","onSubmit","minLength","maxLength","_c","$RefreshReg$"],"sources":["/Users/mattmogan/Desktop/Projects/WordleFlex/src/components/Gameboard/Gameboard.jsx"],"sourcesContent":["import React, {useState} from \"react\";\nimport \"./Gameboard.css\"; \nimport {getRandomWord} from \"../../utilities/api\"\nimport {createBoardState} from \"../../utilities/helpers\"\nimport GuessRow from \"../GuessRow/GuessRow\"\n\nexport default function Gameboard(){\n    \n    // WordleFlex states \n    \n    const startingGuesses = 6\n    const startingLetters = 5\n\n    const [keywordLetters, setKeywordLetters] = useState(startingLetters) \n    // minimum 3, maximum 8 - letters in the keyword\n    const [keyword, setKeyword] = useState(getRandomWord(5)) \n    // this is the word the player is guessing\n    const [guessNumber, setGuessNumber] = useState(0) \n    // this tracks which guess we are on in the game. used to update the guess rows once a guess is evaluated, and check whether the game ends after 5 guesses \n    const [maxGuesses, setMaxGuesses] = useState(startingGuesses) \n    // players cannot change this, but set to a state variable for future scalability and flexibility\n    const [guess, setGuess] = useState(\"\")    \n    // the guess that the player enters, gets updated by the guess form\n    const [boardState, setBoardState] = useState(createBoardState(keywordLetters,maxGuesses))\n    // running tally of the guesses across the whole round\n    \n    const updateLetters = (event) => {\n        event.preventDefault()\n        setKeywordLetters(Number(event.target.value))\n    }\n\n    const updateGuesses = (event) => {\n        event.preventDefault()\n        setMaxGuesses(Number(event.target.value))\n    }\n\n    const submitGuess = (event) => {\n        event.preventDefault()\n        console.log(\"guess\")\n    }\n\n    return (\n        <>\n        <div className=\"container\">    \n           {[...Array(maxGuesses).keys()].map((arg) => {\n            return(\n                <GuessRow\n                    key = {arg}\n                    id = {arg}\n                    keywordLetters = {keywordLetters} \n                />\n            )\n           })}\n        </div>\n        <form className=\"settings\">\n            <label>Letters:</label>\n            <input \n                id=\"LettersInput\" \n                type=\"number\" \n                min={4} \n                max={8}\n                value={keywordLetters}\n                onChange={updateLetters}\n            />\n            <label>Guesses:</label>\n            <input \n                id=\"GuessesInput\" \n                type=\"number\" \n                min={2} \n                max={8}\n                value={maxGuesses}\n                onChange={updateGuesses}\n            />\n        </form>\n        <form className=\"guess\" onSubmit={submitGuess}>\n            <label>Guess:</label>\n            <input \n                type=\"text\" \n                minLength={keywordLetters} \n                maxLength={keywordLetters}\n            />\n            <input \n                type=\"submit\" \n                value=\"Guess\"\n            />\n        </form>\n        </>\n    )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}