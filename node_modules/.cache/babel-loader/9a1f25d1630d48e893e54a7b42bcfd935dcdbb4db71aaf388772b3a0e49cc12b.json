{"ast":null,"code":"var _jsxFileName = \"/Users/mattmogan/Desktop/Projects/WordleFlex/src/components/Gameboard/Gameboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Gameboard.css\";\nimport { getRandomWord } from \"../../utilities/api\";\nimport { GuessRow } from \"../GuessRow/GuessRow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Gameboard() {\n  _s();\n  // WordleFlex states \n\n  const [keywordLetters, setkeywordLetters] = useState(5);\n  // minimum 3, maximum 8 - letters in the keyword\n  const [keyword, setKeyword] = useState(getRandomWord(5));\n  // this is the word the player is guessing\n  const [guessNumber, setGuessNumber] = useState(1);\n  // this tracks which guess we are on in the game. used to update the guess rows once a guess is evaluated, and check whether the game ends after 5 guesses \n  const [maxGuesses, setMaxGuesses] = useState(5);\n  // players cannot change this, but set to a state variable for future scalability and flexibility\n  const [guess, setGuess] = useState(\"\");\n  // the guess that the player enters, gets updated by the guess form\n  const [guessHistory, setGuessHistory] = useState(\"\");\n  // running tally of the guesses across the whole round\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [...Array(maxGuesses).keys()].map(arg => {\n      /*#__PURE__*/_jsxDEV(GuessRow, {\n        id: arg,\n        className: \"inactive\",\n        guessNumber: guessNumber,\n        guess: guess,\n        maxGuesses: maxGuesses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n}\n_s(Gameboard, \"bMwiutvfdu4UD2WvbfLhf2s5IcY=\");\n_c = Gameboard;\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["React","useState","getRandomWord","GuessRow","jsxDEV","_jsxDEV","Gameboard","_s","keywordLetters","setkeywordLetters","keyword","setKeyword","guessNumber","setGuessNumber","maxGuesses","setMaxGuesses","guess","setGuess","guessHistory","setGuessHistory","className","children","Array","keys","map","arg","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mattmogan/Desktop/Projects/WordleFlex/src/components/Gameboard/Gameboard.jsx"],"sourcesContent":["import React, {useState} from \"react\";\nimport \"./Gameboard.css\"; \nimport {getRandomWord} from \"../../utilities/api\"\nimport {GuessRow} from \"../GuessRow/GuessRow\"\n\nexport default function Gameboard(){\n    \n    // WordleFlex states \n    \n    const [keywordLetters, setkeywordLetters] = useState(5) \n    // minimum 3, maximum 8 - letters in the keyword\n    const [keyword, setKeyword] = useState(getRandomWord(5)) \n    // this is the word the player is guessing\n    const [guessNumber, setGuessNumber] = useState(1) \n    // this tracks which guess we are on in the game. used to update the guess rows once a guess is evaluated, and check whether the game ends after 5 guesses \n    const [maxGuesses, setMaxGuesses] = useState(5) \n    // players cannot change this, but set to a state variable for future scalability and flexibility\n    const [guess, setGuess] = useState(\"\")    \n    // the guess that the player enters, gets updated by the guess form\n    const [guessHistory, setGuessHistory] = useState(\"\")\n    // running tally of the guesses across the whole round\n\n    return (\n        <div className=\"container\">    \n           {[...Array(maxGuesses).keys()].map((arg) => {\n            <GuessRow\n                id = {arg}\n                className=\"inactive\" \n                guessNumber={guessNumber}\n                guess={guess}\n                maxGuesses={maxGuesses}\n            />\n           })}\n        </div>  \n    )\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAO,iBAAiB;AACxB,SAAQC,aAAa,QAAO,qBAAqB;AACjD,SAAQC,QAAQ,QAAO,sBAAsB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7C,eAAe,SAASC,SAASA,CAAA,EAAE;EAAAC,EAAA;EAE/B;;EAEA,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACvD;EACA,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAACC,aAAa,CAAC,CAAC,CAAC,CAAC;EACxD;EACA,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACjD;EACA,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EAC/C;EACA,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC;EACA,MAAM,CAACiB,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACpD;;EAEA,oBACII,OAAA;IAAKe,SAAS,EAAC,WAAW;IAAAC,QAAA,EACtB,CAAC,GAAGC,KAAK,CAACR,UAAU,CAAC,CAACS,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAEC,GAAG,IAAK;MAC3C,aAAApB,OAAA,CAACF,QAAQ;QACLuB,EAAE,EAAID,GAAI;QACVL,SAAS,EAAC,UAAU;QACpBR,WAAW,EAAEA,WAAY;QACzBI,KAAK,EAAEA,KAAM;QACbF,UAAU,EAAEA;MAAW;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CAAC;IACH,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACvB,EAAA,CA9BuBD,SAAS;AAAAyB,EAAA,GAATzB,SAAS;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}