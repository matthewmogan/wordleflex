{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import\"./Gameboard.css\";import{getRandomWord}from\"../../utilities/api\";import{createBoardState}from\"../../utilities/helpers\";import GuessRow from\"../GuessRow/GuessRow\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";export default function Gameboard(){const startingGuesses=6;// default starting guesses (rows)\nconst startingLetters=5;// default starting letters (columns)\nconst boardEvals={// object containing board evaluation key / value pairs \ninactive:\"IA\",rightLetter_RightPlace:\"RR\",rightLetter_WrongPlace:\"RW\",wrongLetter_WrongPlace:\"WW\"};// Board dimension states - sets up the Gameboard construction:\nconst[keywordLetters,setKeywordLetters]=useState(startingLetters);// letters in the answer\nconst[maxGuesses,setMaxGuesses]=useState(startingGuesses);// max attempts\n// Gameboard states:\nconst[boardLetters,setBoardLetters]=useState(createBoardState(keywordLetters,maxGuesses,\"\"));// running tally of the guesses across the whole round\nconst[boardEvaluated,setBoardEvaluated]=useState(createBoardState(keywordLetters,maxGuesses,boardEvals.inactive));//  Active game parameters: \nconst[keyword,setKeyword]=useState(getRandomWord(keywordLetters));// the answer\nconst[guessNumber,setGuessNumber]=useState(0);// attempt number\nconst[guess,setGuess]=useState(\"\");// active guess \n// keywordLetters update event handler:\nconst updateKeywordLetters=event=>{event.preventDefault();setKeywordLetters(Number(event.target.value));};useEffect(()=>{// reset game after keyword letters change\nsetKeyword(getRandomWord(keywordLetters));// reset keyword\nsetBoardLetters(createBoardState(keywordLetters,maxGuesses,\"\"));// reset boardstate\nsetGuessNumber(0);// reset guess number\n},[keywordLetters]);// maxGuesses update event handler:\nconst updateMaxGuesses=event=>{event.preventDefault();setMaxGuesses(Number(event.target.value));// reset max guesses\n};useEffect(()=>{setBoardLetters(createBoardState(keywordLetters,maxGuesses,\"\"));// reset boardstate\nsetGuessNumber(0);// reset guess number\n},[maxGuesses]);// updateGuess event handler:\nconst updateGuess=event=>{event.preventDefault();setGuess(event.target.value);};const calculateGuess=event=>{event.preventDefault();if(guessNumber===maxGuesses){return;// exit if user is out of guesses\n}// 1. Update the letter state of the board \nconst guessArray=[...guess];// spread the guess into an Array\nconst newBoardLetters=boardLetters.map(row=>[...row]);// create a deep copy of the 2D state, so we don't update state directly\nnewBoardLetters[guessNumber]=guessArray;// update the copy of the board state with the guess inserted       \nsetBoardLetters(newBoardLetters);// update the letter state of the board\n// 2. Evaluate the guess and update the evaluated state\nconst evaluatedArray=Array(keywordLetters);const keywordArray=Array.from(keyword);const newBoardEvaluated=boardEvaluated.map(row=>[...row]);guessArray.forEach((x,index)=>{if(x===keywordArray[index]){evaluatedArray[index]=boardEvals.rightLetter_RightPlace;}else if(keywordArray.some(y=>x===y)){evaluatedArray[index]=boardEvals.rightLetter_WrongPlace;}else evaluatedArray[index]=boardEvals.wrongLetter_WrongPlace;});newBoardEvaluated[guessNumber]=[...evaluatedArray];// update the \nsetBoardEvaluated(newBoardEvaluated);// update the evaluated state\n// 3. Update other relevant states\nsetGuessNumber(guessNumber+1);// update the guess number\n};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:[...Array(maxGuesses).keys()].map(arg=>{return/*#__PURE__*/_jsx(GuessRow,{id:arg,keywordLetters:keywordLetters},arg);})}),/*#__PURE__*/_jsxs(\"form\",{className:\"settings\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Letters:\"}),/*#__PURE__*/_jsx(\"input\",{id:\"LettersInput\",type:\"number\",min:4,max:8,value:keywordLetters,onChange:updateKeywordLetters}),/*#__PURE__*/_jsx(\"label\",{children:\"Guesses:\"}),/*#__PURE__*/_jsx(\"input\",{id:\"GuessesInput\",type:\"number\",min:2,max:8,value:maxGuesses,onChange:updateMaxGuesses})]}),/*#__PURE__*/_jsxs(\"form\",{className:\"guess\",onSubmit:calculateGuess,children:[/*#__PURE__*/_jsx(\"label\",{children:\"Guess:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",minLength:keywordLetters,maxLength:keywordLetters,onChange:updateGuess}),/*#__PURE__*/_jsx(\"input\",{type:\"submit\",value:\"Guess\"})]})]});}","map":{"version":3,"names":["React","useState","useEffect","getRandomWord","createBoardState","GuessRow","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Gameboard","startingGuesses","startingLetters","boardEvals","inactive","rightLetter_RightPlace","rightLetter_WrongPlace","wrongLetter_WrongPlace","keywordLetters","setKeywordLetters","maxGuesses","setMaxGuesses","boardLetters","setBoardLetters","boardEvaluated","setBoardEvaluated","keyword","setKeyword","guessNumber","setGuessNumber","guess","setGuess","updateKeywordLetters","event","preventDefault","Number","target","value","updateMaxGuesses","updateGuess","calculateGuess","guessArray","newBoardLetters","map","row","evaluatedArray","Array","keywordArray","from","newBoardEvaluated","forEach","x","index","some","y","children","className","keys","arg","id","type","min","max","onChange","onSubmit","minLength","maxLength"],"sources":["/Users/mattmogan/Desktop/Projects/WordleFlex/src/components/Gameboard/Gameboard.jsx"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport \"./Gameboard.css\"; \nimport {getRandomWord} from \"../../utilities/api\"\nimport {createBoardState} from \"../../utilities/helpers\"\nimport GuessRow from \"../GuessRow/GuessRow\"\n\nexport default function Gameboard(){\n    \n    const startingGuesses = 6 // default starting guesses (rows)\n    const startingLetters = 5 // default starting letters (columns)\n    const boardEvals = { // object containing board evaluation key / value pairs \n        inactive: \"IA\", \n        rightLetter_RightPlace: \"RR\",\n        rightLetter_WrongPlace: \"RW\",\n        wrongLetter_WrongPlace: \"WW\"\n    }  \n\n    // Board dimension states - sets up the Gameboard construction:\n\n    const [keywordLetters, setKeywordLetters] = useState(startingLetters) // letters in the answer\n    const [maxGuesses, setMaxGuesses] = useState(startingGuesses) // max attempts\n\n    // Gameboard states:\n\n    const [boardLetters, setBoardLetters] = useState(createBoardState(keywordLetters,maxGuesses,\"\")) // running tally of the guesses across the whole round\n    const [boardEvaluated, setBoardEvaluated] = useState(createBoardState(keywordLetters,maxGuesses,boardEvals.inactive)) \n\n    //  Active game parameters: \n\n    const [keyword, setKeyword] = useState(getRandomWord(keywordLetters)) // the answer\n    const [guessNumber, setGuessNumber] = useState(0) // attempt number\n    const [guess, setGuess] = useState(\"\") // active guess \n\n    // keywordLetters update event handler:\n\n    const updateKeywordLetters = (event) => {\n        event.preventDefault()\n        setKeywordLetters(Number(event.target.value))\n    }\n    useEffect(() => { // reset game after keyword letters change\n        setKeyword(getRandomWord(keywordLetters)) // reset keyword\n        setBoardLetters(createBoardState(keywordLetters,maxGuesses,\"\")) // reset boardstate\n        setGuessNumber(0) // reset guess number\n    }, [keywordLetters])\n\n    // maxGuesses update event handler:\n\n    const updateMaxGuesses = (event) => {\n        event.preventDefault()\n        setMaxGuesses(Number(event.target.value)) // reset max guesses\n    }\n    useEffect( () => {\n        setBoardLetters(createBoardState(keywordLetters,maxGuesses,\"\")) // reset boardstate\n        setGuessNumber(0) // reset guess number\n    },[maxGuesses])\n\n    // updateGuess event handler:\n\n    const updateGuess = (event) => {\n        event.preventDefault()\n        setGuess(event.target.value)\n    }\n\n    const calculateGuess = (event) => {\n        \n        event.preventDefault()\n        \n        if(guessNumber === maxGuesses){\n            return // exit if user is out of guesses\n        }\n        \n        // 1. Update the letter state of the board \n        \n        const guessArray = [...guess] // spread the guess into an Array\n        const newBoardLetters = boardLetters.map(row => [...row]) // create a deep copy of the 2D state, so we don't update state directly\n        newBoardLetters[guessNumber] = guessArray // update the copy of the board state with the guess inserted       \n        setBoardLetters(newBoardLetters) // update the letter state of the board\n\n        // 2. Evaluate the guess and update the evaluated state\n        \n        const evaluatedArray = Array(keywordLetters)\n        const keywordArray = Array.from(keyword)\n        const newBoardEvaluated = boardEvaluated.map(row => [...row])\n\n        guessArray.forEach((x,index) => {\n            if (x === keywordArray[index]) {\n                evaluatedArray[index] = boardEvals.rightLetter_RightPlace\n            } else if (keywordArray.some(y => x === y)) {\n                evaluatedArray[index] = boardEvals.rightLetter_WrongPlace\n            } else \n               evaluatedArray[index] = boardEvals.wrongLetter_WrongPlace         \n        })\n\n        newBoardEvaluated[guessNumber] = [...evaluatedArray] // update the \n        setBoardEvaluated(newBoardEvaluated) // update the evaluated state\n\n        // 3. Update other relevant states\n\n        setGuessNumber(guessNumber+1) // update the guess number\n\n\n    }\n\n    return (\n        <>\n        <div className=\"container\">    \n           {[...Array(maxGuesses).keys()].map((arg) => {\n            return(\n                <GuessRow\n                    key = {arg}\n                    id = {arg}\n                    keywordLetters = {keywordLetters} \n                />\n            )\n           })}\n        </div>\n        <form className=\"settings\">\n            <label>Letters:</label>\n            <input \n                id=\"LettersInput\" \n                type=\"number\" \n                min={4} \n                max={8}\n                value={keywordLetters}\n                onChange={updateKeywordLetters}\n            />\n            <label>Guesses:</label>\n            <input \n                id=\"GuessesInput\" \n                type=\"number\" \n                min={2} \n                max={8}\n                value={maxGuesses}\n                onChange={updateMaxGuesses}\n            />\n        </form>\n        <form className=\"guess\" onSubmit={calculateGuess}>\n            <label>Guess:</label>\n            <input \n                type=\"text\" \n                minLength={keywordLetters} \n                maxLength={keywordLetters}\n                onChange={updateGuess}\n            />\n            <input \n                type=\"submit\" \n                value=\"Guess\"\n            />\n        </form>\n        </>\n    )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}