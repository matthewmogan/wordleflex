{"ast":null,"code":"var _jsxFileName = \"/Users/mattmogan/Desktop/Projects/WordleFlex/src/components/Gameboard/Gameboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Gameboard.css\";\nimport { getRandomWord } from \"../../utilities/modules\";\nimport { createBoardState } from \"../../utilities/helpers\";\nimport { validateWord } from \"../../utilities/apis\";\nimport GuessRow from \"../GuessRow/GuessRow\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Gameboard() {\n  _s();\n  validateWord(\"word\").then(result => console.log(result));\n\n  // default starting guesses (rows) and letters (columnns):\n  const startingGuesses = 6;\n  const startingLetters = 5;\n  // object containing board evaluation key / value pairs: \n  const letterEvals = {\n    inactive: \"inactive\",\n    rightLetter_RightPlace: \"rightLetter_RightPlace\",\n    rightLetter_WrongPlace: \"rightLetter_WrongPlace\",\n    wrongLetter_WrongPlace: \"wrongLetter_WrongPlace\"\n  };\n  // round status state values:\n  const roundStatuses = {\n    active: \"active\",\n    won: \"won\",\n    lost: \"lost\"\n  };\n  const roundStatusMessages = {\n    active: \"Guess the secret word!\",\n    won: \"You won!\",\n    lost: \"You lost! The word was\",\n    invalidWord: \"Guess must be a valid word\"\n  };\n\n  // WordleFlex States:\n\n  // letters in the answer:\n  const [keywordLetters, setKeywordLetters] = useState(startingLetters);\n  // max guess attempts per round:\n  const [maxGuesses, setMaxGuesses] = useState(startingGuesses);\n  // 2D array representing the guessed letters:\n  const [boardLetters, setBoardLetters] = useState(createBoardState(keywordLetters, maxGuesses, \"\"));\n  // 2D array representing the evaluated guesses:' \n  const [boardEvaluated, setBoardEvaluated] = useState(createBoardState(keywordLetters, maxGuesses, letterEvals.inactive));\n  // the answer:\n  const [keyword, setKeyword] = useState(getRandomWord(keywordLetters).toUpperCase());\n  // attempt number:\n  const [guessNumber, setGuessNumber] = useState(0);\n  // active guess: \n  const [guess, setGuess] = useState(\"\");\n  // tracks whether the round is in progress, won, or lost:\n  const [roundStatus, setRoundStatus] = useState(roundStatuses.active);\n  // text to display how many guesses the player has left, and if they won or lost\n  const [statusText, setStatusText] = useState(roundStatusMessages.active);\n\n  // keywordLetters update event handler - gets a new keyword of a certain length, resets the board and restarts the game\n\n  const updateKeywordLetters = event => {\n    event.preventDefault();\n    setKeywordLetters(Number(event.target.value));\n    setKeyword(getRandomWord(Number(event.target.value)).toUpperCase());\n    setBoardLetters(createBoardState(Number(event.target.value), maxGuesses, \"\"));\n    setBoardEvaluated(createBoardState(Number(event.target.value), maxGuesses, letterEvals.inactive));\n    setGuessNumber(0);\n    setRoundStatus(roundStatuses.active);\n    setStatusText(roundStatusMessages.active);\n  };\n\n  // maxGuesses update event handler - adds or subtracts guess rows from the board. resets the board and restarts the game\n\n  const updateMaxGuesses = event => {\n    event.preventDefault();\n    setMaxGuesses(Number(event.target.value));\n    setKeyword(getRandomWord(keywordLetters).toUpperCase());\n    setBoardLetters(createBoardState(keywordLetters, Number(event.target.value), \"\"));\n    setBoardEvaluated(createBoardState(keywordLetters, Number(event.target.value), letterEvals.inactive));\n    setGuessNumber(0);\n    setRoundStatus(roundStatuses.active);\n    setStatusText(roundStatusMessages.active);\n  };\n\n  // updateGuess event handler - capitalizes the user guess and logs the guess in state\n\n  const updateGuess = event => {\n    event.preventDefault();\n    let string = event.target.value;\n    string = string.toUpperCase();\n    setGuess(string);\n  };\n  const resetGame = () => {\n    setKeyword(getRandomWord(keywordLetters).toUpperCase());\n    setBoardLetters(createBoardState(keywordLetters, maxGuesses, \"\"));\n    setBoardEvaluated(createBoardState(keywordLetters, maxGuesses, letterEvals.inactive));\n    setGuessNumber(0);\n    setRoundStatus(roundStatuses.active);\n    setStatusText(roundStatusMessages.active);\n  };\n\n  // Calculate Guess \n\n  const calculateGuess = event => {\n    event.preventDefault();\n\n    // 1. Exit if the user is out of guesses, or round state is not active\n\n    if (guessNumber === maxGuesses || roundStatus !== roundStatuses.active) {\n      return;\n    }\n\n    // 2. Check if the word is invalid - exit if invalid and change the status message to \"please enter a valid word\" - continue if valid\n\n    // 3. Update the letter state of the board \n\n    // spread the guess into an Array:\n    const guessArray = [...guess];\n    // create a deep copy of the 2D state, so we don't update state directly:\n    const newBoardLetters = boardLetters.map(row => [...row]);\n    // update the copy of the board state with the guess inserted:\n    newBoardLetters[guessNumber] = guessArray;\n    // update the letter state of the board:\n    setBoardLetters(newBoardLetters);\n\n    // 4. Evaluate the guess and update the evaluated state and guess number\n\n    const evaluatedArray = Array(keywordLetters);\n    const keywordArray = Array.from(keyword);\n    const newBoardEvaluated = boardEvaluated.map(row => [...row]);\n    guessArray.forEach((x, index) => {\n      if (x === keywordArray[index]) {\n        evaluatedArray[index] = letterEvals.rightLetter_RightPlace;\n      } else if (keywordArray.some(y => x === y)) {\n        evaluatedArray[index] = letterEvals.rightLetter_WrongPlace;\n      } else evaluatedArray[index] = letterEvals.wrongLetter_WrongPlace;\n    });\n    newBoardEvaluated[guessNumber] = [...evaluatedArray];\n    setBoardEvaluated(newBoardEvaluated);\n    setGuessNumber(guessNumber + 1);\n\n    // 5. Check if the player won or lost and update the round status and status text\n\n    if (evaluatedArray.every(x => x === letterEvals.rightLetter_RightPlace)) {\n      setRoundStatus(roundStatuses.won);\n      setStatusText(updateStatusText(roundStatuses.won));\n    } else if (guessNumber + 1 === maxGuesses) {\n      setRoundStatus(roundStatus.lost, guessNumber + 1);\n      setStatusText(updateStatusText(roundStatuses.lost));\n    }\n  };\n  const updateStatusText = status => {\n    switch (status) {\n      case roundStatuses.active:\n        return roundStatusMessages.active;\n      case roundStatuses.won:\n        return roundStatusMessages.won;\n      case roundStatuses.lost:\n        return roundStatusMessages.lost + \" \" + keyword;\n      default:\n        return roundStatusMessages.active;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"settings\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Letters:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"LettersInput\",\n        type: \"number\",\n        min: 4,\n        max: 8,\n        value: keywordLetters,\n        onChange: updateKeywordLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Guesses:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"GuessesInput\",\n        type: \"number\",\n        min: 2,\n        max: 8,\n        value: maxGuesses,\n        onChange: updateMaxGuesses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"resetButton\",\n        onClick: () => {\n          resetGame();\n        },\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [...Array(maxGuesses).keys()].map(arg => {\n        return /*#__PURE__*/_jsxDEV(GuessRow, {\n          id: arg // tell GuessRow which ROW it is\n          ,\n          keywordLetters: keywordLetters // tell GuessRow how many letters (COL) in the keyword\n          ,\n          boardLetters: boardLetters // Allow GuessRow to pass the Letters their value\n          ,\n          boardEvaluated: boardEvaluated // Allow GuessRow to pass the Letters their evaluation class\n        }, arg, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"guess\",\n      onSubmit: calculateGuess,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Guess:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        minLength: keywordLetters,\n        maxLength: keywordLetters,\n        onChange: updateGuess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"statusInfo\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: statusText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Gameboard, \"Tbp8y6cLLPxtCmoLlZklo/dlL5A=\");\n_c = Gameboard;\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["React","useState","getRandomWord","createBoardState","validateWord","GuessRow","jsxDEV","_jsxDEV","Fragment","_Fragment","Gameboard","_s","then","result","console","log","startingGuesses","startingLetters","letterEvals","inactive","rightLetter_RightPlace","rightLetter_WrongPlace","wrongLetter_WrongPlace","roundStatuses","active","won","lost","roundStatusMessages","invalidWord","keywordLetters","setKeywordLetters","maxGuesses","setMaxGuesses","boardLetters","setBoardLetters","boardEvaluated","setBoardEvaluated","keyword","setKeyword","toUpperCase","guessNumber","setGuessNumber","guess","setGuess","roundStatus","setRoundStatus","statusText","setStatusText","updateKeywordLetters","event","preventDefault","Number","target","value","updateMaxGuesses","updateGuess","string","resetGame","calculateGuess","guessArray","newBoardLetters","map","row","evaluatedArray","Array","keywordArray","from","newBoardEvaluated","forEach","x","index","some","y","every","updateStatusText","status","children","className","fileName","_jsxFileName","lineNumber","columnNumber","id","type","min","max","onChange","onClick","keys","arg","onSubmit","minLength","maxLength","_c","$RefreshReg$"],"sources":["/Users/mattmogan/Desktop/Projects/WordleFlex/src/components/Gameboard/Gameboard.jsx"],"sourcesContent":["import React, {useState} from \"react\";\nimport \"./Gameboard.css\"; \nimport {getRandomWord} from \"../../utilities/modules\"\nimport {createBoardState} from \"../../utilities/helpers\" \nimport {validateWord} from \"../../utilities/apis\";\nimport GuessRow from \"../GuessRow/GuessRow\"\n\nexport default function Gameboard(){\n    \n    validateWord(\"word\").then(result => console.log(result) )\n    \n    // default starting guesses (rows) and letters (columnns):\n    const startingGuesses = 6 \n    const startingLetters = 5\n    // object containing board evaluation key / value pairs: \n    const letterEvals = {  \n        inactive: \"inactive\", \n        rightLetter_RightPlace: \"rightLetter_RightPlace\",\n        rightLetter_WrongPlace: \"rightLetter_WrongPlace\",\n        wrongLetter_WrongPlace: \"wrongLetter_WrongPlace\"\n    }  \n    // round status state values:\n    const roundStatuses = {\n        active: \"active\",\n        won: \"won\",\n        lost: \"lost\"\n    }\n    const roundStatusMessages = {\n        active: \"Guess the secret word!\",\n        won: \"You won!\",\n        lost: \"You lost! The word was\",\n        invalidWord: \"Guess must be a valid word\"\n    }\n\n    // WordleFlex States:\n\n    // letters in the answer:\n    const [keywordLetters, setKeywordLetters] = useState(startingLetters) \n    // max guess attempts per round:\n    const [maxGuesses, setMaxGuesses] = useState(startingGuesses)\n    // 2D array representing the guessed letters:\n    const [boardLetters, setBoardLetters] = useState(createBoardState(keywordLetters,maxGuesses,\"\")) \n    // 2D array representing the evaluated guesses:' \n    const [boardEvaluated, setBoardEvaluated] = useState(createBoardState(keywordLetters,maxGuesses,letterEvals.inactive)) \n    // the answer:\n    const [keyword, setKeyword] = useState(getRandomWord(keywordLetters).toUpperCase()) \n    // attempt number:\n    const [guessNumber, setGuessNumber] = useState(0) \n    // active guess: \n    const [guess, setGuess] = useState(\"\") \n    // tracks whether the round is in progress, won, or lost:\n    const [roundStatus, setRoundStatus] = useState(roundStatuses.active)\n    // text to display how many guesses the player has left, and if they won or lost\n    const [statusText, setStatusText] = useState(roundStatusMessages.active)\n    \n    // keywordLetters update event handler - gets a new keyword of a certain length, resets the board and restarts the game\n\n    const updateKeywordLetters = (event) => {\n        event.preventDefault()\n        setKeywordLetters(Number(event.target.value))\n        setKeyword(getRandomWord(Number(event.target.value)).toUpperCase())\n        setBoardLetters(createBoardState(Number(event.target.value),maxGuesses,\"\"))\n        setBoardEvaluated(createBoardState(Number(event.target.value),maxGuesses,letterEvals.inactive))\n        setGuessNumber(0)\n        setRoundStatus(roundStatuses.active)\n        setStatusText(roundStatusMessages.active)\n    }\n\n    // maxGuesses update event handler - adds or subtracts guess rows from the board. resets the board and restarts the game\n\n    const updateMaxGuesses = (event) => {\n        event.preventDefault()\n        setMaxGuesses(Number(event.target.value)) \n        setKeyword(getRandomWord(keywordLetters).toUpperCase())\n        setBoardLetters(createBoardState(keywordLetters,Number(event.target.value),\"\"))\n        setBoardEvaluated(createBoardState(keywordLetters,Number(event.target.value),letterEvals.inactive))\n        setGuessNumber(0) \n        setRoundStatus(roundStatuses.active)        \n        setStatusText(roundStatusMessages.active)\n    }\n\n    // updateGuess event handler - capitalizes the user guess and logs the guess in state\n\n    const updateGuess = (event) => {\n        event.preventDefault()\n        let string = event.target.value\n        string = string.toUpperCase()\n        setGuess(string)\n    }\n\n    const resetGame = () => {\n        setKeyword(getRandomWord(keywordLetters).toUpperCase())\n        setBoardLetters(createBoardState(keywordLetters,maxGuesses,\"\"))\n        setBoardEvaluated(createBoardState(keywordLetters,maxGuesses,letterEvals.inactive))\n        setGuessNumber(0) \n        setRoundStatus(roundStatuses.active)        \n        setStatusText(roundStatusMessages.active)\n    }\n\n    // Calculate Guess \n\n    const calculateGuess = (event) => {\n        \n        event.preventDefault()\n        \n        // 1. Exit if the user is out of guesses, or round state is not active\n        \n        if(guessNumber === maxGuesses || roundStatus !== roundStatuses.active ){\n            return \n        }\n\n        // 2. Check if the word is invalid - exit if invalid and change the status message to \"please enter a valid word\" - continue if valid\n\n        // 3. Update the letter state of the board \n        \n        // spread the guess into an Array:\n        const guessArray = [...guess] \n        // create a deep copy of the 2D state, so we don't update state directly:\n        const newBoardLetters = boardLetters.map(row => [...row]) \n        // update the copy of the board state with the guess inserted:\n        newBoardLetters[guessNumber] = guessArray \n        // update the letter state of the board:\n        setBoardLetters(newBoardLetters) \n\n        // 4. Evaluate the guess and update the evaluated state and guess number\n        \n        const evaluatedArray = Array(keywordLetters)\n        const keywordArray = Array.from(keyword)\n        const newBoardEvaluated = boardEvaluated.map(row => [...row])\n        guessArray.forEach((x,index) => {\n            if (x === keywordArray[index]) {\n                evaluatedArray[index] = letterEvals.rightLetter_RightPlace\n            } else if (keywordArray.some(y => x === y)) {\n                evaluatedArray[index] = letterEvals.rightLetter_WrongPlace\n            } else \n               evaluatedArray[index] = letterEvals.wrongLetter_WrongPlace         \n        })\n        newBoardEvaluated[guessNumber] = [...evaluatedArray] \n        setBoardEvaluated(newBoardEvaluated) \n        setGuessNumber(guessNumber+1) \n\n        // 5. Check if the player won or lost and update the round status and status text\n\n        if(evaluatedArray.every((x) => x === letterEvals.rightLetter_RightPlace)){\n            setRoundStatus(roundStatuses.won) \n            setStatusText(updateStatusText(roundStatuses.won))\n        } else if (guessNumber+1 === maxGuesses) {\n            setRoundStatus(roundStatus.lost, guessNumber+1)\n            setStatusText(updateStatusText(roundStatuses.lost))\n        }\n\n    }\n\n    const updateStatusText = (status) => {\n        switch(status) {\n            case roundStatuses.active:\n                return roundStatusMessages.active\n            case roundStatuses.won:\n                return roundStatusMessages.won\n            case roundStatuses.lost:\n                return roundStatusMessages.lost + \" \" + keyword\n            default:\n                return roundStatusMessages.active\n        }\n    }\n\n    return (\n        <>\n        <form className=\"settings\">\n            <label>Letters:</label>\n            <input \n                id=\"LettersInput\" \n                type=\"number\" \n                min={4} \n                max={8}\n                value={keywordLetters}\n                onChange={updateKeywordLetters}\n            />\n            <label>Guesses:</label>\n            <input \n                id=\"GuessesInput\" \n                type=\"number\" \n                min={2} \n                max={8}\n                value={maxGuesses}\n                onChange={updateMaxGuesses}\n            />\n        <button \n            className=\"resetButton\" \n            onClick={()=>{resetGame()}}\n        >Reset\n        </button>\n        </form>\n        <div className=\"container\">    \n           {[...Array(maxGuesses).keys()].map((arg) => {\n            return(\n                <GuessRow\n                    key = {arg}\n                    id = {arg} // tell GuessRow which ROW it is\n                    keywordLetters = {keywordLetters} // tell GuessRow how many letters (COL) in the keyword\n                    boardLetters = {boardLetters} // Allow GuessRow to pass the Letters their value\n                    boardEvaluated = {boardEvaluated} // Allow GuessRow to pass the Letters their evaluation class\n                />\n            )\n           })}\n        </div>\n        <form className=\"guess\" onSubmit={calculateGuess}>\n            <label>Guess:</label>\n            <input \n                type=\"text\" \n                minLength={keywordLetters} \n                maxLength={keywordLetters}\n                onChange={updateGuess}\n            />\n            <input \n                type=\"submit\" \n                value=\"Guess\"\n            />\n        </form>\n        <div className=\"statusInfo\">\n           <h2>{statusText}</h2>\n        </div>\n        </>\n    )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}