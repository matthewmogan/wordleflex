{"ast":null,"code":"var _jsxFileName = \"/Users/mattmogan/Desktop/Projects/WordleFlex/src/components/Gameboard/Gameboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Gameboard.css\";\nimport { getRandomWord } from \"../../utilities/api\";\nimport { createBoardState } from \"../../utilities/helpers\";\nimport GuessRow from \"../GuessRow/GuessRow\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Gameboard() {\n  _s();\n  // WordleFlex states \n\n  const [keywordLetters, setKeywordLetters] = useState(5);\n  // minimum 3, maximum 8 - letters in the keyword\n  const [keyword, setKeyword] = useState(getRandomWord(5));\n  // this is the word the player is guessing\n  const [guessNumber, setGuessNumber] = useState(1);\n  // this tracks which guess we are on in the game. used to update the guess rows once a guess is evaluated, and check whether the game ends after 5 guesses \n  const [maxGuesses, setMaxGuesses] = useState(5);\n  // players cannot change this, but set to a state variable for future scalability and flexibility\n  const [guess, setGuess] = useState(\"\");\n  // the guess that the player enters, gets updated by the guess form\n  const [boardState, setBoardState] = useState(createBoardState());\n  // running tally of the guesses across the whole round\n\n  function updateSettings() {\n    setKeywordLetters(document.getElementById(\"LettersInput\").value);\n    setMaxGuesses(document.getElementById(\"GuessesInput\").value);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [...Array(maxGuesses).keys()].map(arg => {\n        return /*#__PURE__*/_jsxDEV(GuessRow, {\n          id: arg,\n          keywordLetters: keywordLetters\n        }, arg, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"settings\",\n      children: [/*#__PURE__*/_jsxDEV(\"for\", {\n        children: \"Letters:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"LettersInput\",\n        type: \"number\",\n        min: 3,\n        max: 8,\n        value: keywordLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"for\", {\n        children: \"Guesses:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"GuessesInput\",\n        type: \"number\",\n        min: 3,\n        max: 8\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Update\",\n        onSubmit: updateSettings()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"guess\",\n      children: [/*#__PURE__*/_jsxDEV(\"for\", {\n        children: \"Guess:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        minlength: keywordLetters,\n        maxlength: keywordLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Guess!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Gameboard, \"opiKe5dW+yqJ5sbEjIU0TFr7/so=\");\n_c = Gameboard;\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["React","useState","getRandomWord","createBoardState","GuessRow","jsxDEV","_jsxDEV","Fragment","_Fragment","Gameboard","_s","keywordLetters","setKeywordLetters","keyword","setKeyword","guessNumber","setGuessNumber","maxGuesses","setMaxGuesses","guess","setGuess","boardState","setBoardState","updateSettings","document","getElementById","value","children","className","Array","keys","map","arg","id","fileName","_jsxFileName","lineNumber","columnNumber","type","min","max","onSubmit","minlength","maxlength","_c","$RefreshReg$"],"sources":["/Users/mattmogan/Desktop/Projects/WordleFlex/src/components/Gameboard/Gameboard.jsx"],"sourcesContent":["import React, {useState} from \"react\";\nimport \"./Gameboard.css\"; \nimport {getRandomWord} from \"../../utilities/api\"\nimport {createBoardState} from \"../../utilities/helpers\"\nimport GuessRow from \"../GuessRow/GuessRow\"\n\nexport default function Gameboard(){\n    \n    // WordleFlex states \n    \n    const [keywordLetters, setKeywordLetters] = useState(5) \n    // minimum 3, maximum 8 - letters in the keyword\n    const [keyword, setKeyword] = useState(getRandomWord(5)) \n    // this is the word the player is guessing\n    const [guessNumber, setGuessNumber] = useState(1) \n    // this tracks which guess we are on in the game. used to update the guess rows once a guess is evaluated, and check whether the game ends after 5 guesses \n    const [maxGuesses, setMaxGuesses] = useState(5) \n    // players cannot change this, but set to a state variable for future scalability and flexibility\n    const [guess, setGuess] = useState(\"\")    \n    // the guess that the player enters, gets updated by the guess form\n    const [boardState, setBoardState] = useState(createBoardState())\n    // running tally of the guesses across the whole round\n    \n    function updateSettings () {\n        setKeywordLetters(document.getElementById(\"LettersInput\").value)\n        setMaxGuesses(document.getElementById(\"GuessesInput\").value)\n    }\n\n    return (\n        <>\n        <div className=\"container\">    \n           {[...Array(maxGuesses).keys()].map((arg) => {\n            return(\n                <GuessRow\n                    key = {arg}\n                    id = {arg}\n                    keywordLetters = {keywordLetters} \n                />\n            )\n           })}\n        </div>\n        <form className=\"settings\">\n            <for>Letters:</for>\n            <input \n                id=\"LettersInput\" \n                type=\"number\" \n                min={3} \n                max={8}\n                value={keywordLetters}    \n            />\n            <for>Guesses:</for>\n            <input id=\"GuessesInput\" type=\"number\" min={3} max={8}/>\n            <input \n                type=\"submit\" \n                value=\"Update\"\n                onSubmit={updateSettings()}\n            />\n        </form>\n        <form className=\"guess\">\n            <for>Guess:</for>\n            <input type=\"text\" minlength={keywordLetters} maxlength={keywordLetters} />\n            <input \n                type=\"submit\" \n                value=\"Guess!\"\n            />\n        </form>\n        </>\n    )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}