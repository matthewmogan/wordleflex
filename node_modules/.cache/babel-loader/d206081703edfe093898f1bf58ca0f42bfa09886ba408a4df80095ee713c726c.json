{"ast":null,"code":"var _jsxFileName = \"/Users/mattmogan/Desktop/Projects/WordleFlex/src/components/Gameboard/Gameboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Gameboard.css\";\nimport { getRandomWord } from \"../../utilities/api\";\nimport { createBoardState } from \"../../utilities/helpers\";\nimport GuessRow from \"../GuessRow/GuessRow\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Gameboard() {\n  _s();\n  const startingGuesses = 6; // default starting guesses (rows)\n  const startingLetters = 5; // default starting letters (columns)\n  const boardEvals = {\n    // object containing board evaluation key / value pairs \n    inactive: \"IA\",\n    rightLetter_RightPlace: \"RR\",\n    rightLetter_WrongPlace: \"RW\",\n    wrongLetter_WrongPlace: \"WW\"\n  };\n\n  // WordleFlex states\n\n  const [keywordLetters, setKeywordLetters] = useState(startingLetters); // letters in the answer\n  const [maxGuesses, setMaxGuesses] = useState(startingGuesses); // max attempts\n\n  const [keyword, setKeyword] = useState(getRandomWord(keywordLetters)); // the answer\n  const [guessNumber, setGuessNumber] = useState(0); // attempt number\n  const [guess, setGuess] = useState(\"\"); // active guess \n\n  const [boardLetters, setBoardLetters] = useState(createBoardState(keywordLetters, maxGuesses, \"\")); // running tally of the guesses across the whole round\n  const [boardEvaluated, setBoardEvaluated] = useState(createBoardState(keywordLetters, maxGuesses, boardEvals.inactive));\n\n  // keywordLetters update event handler:\n\n  const updateKeywordLetters = event => {\n    event.preventDefault();\n    setKeywordLetters(Number(event.target.value));\n  };\n  useEffect(() => {\n    // reset game after keyword letters change\n    setKeyword(getRandomWord(keywordLetters)); // reset keyword\n    setBoardLetters(createBoardState(keywordLetters, maxGuesses, \"\")); // reset boardstate\n    setGuessNumber(0); // reset guess number\n  }, [keywordLetters]);\n\n  // maxGuesses update event handler:\n\n  const updateMaxGuesses = event => {\n    event.preventDefault();\n    setMaxGuesses(Number(event.target.value)); // reset max guesses\n  };\n  useEffect(() => {\n    setBoardLetters(createBoardState(keywordLetters, maxGuesses, \"\")); // reset boardstate\n    setGuessNumber(0); // reset guess number\n  }, [maxGuesses]);\n\n  // updateGuess event handler\n\n  const updateGuess = event => {\n    event.preventDefault();\n    setGuess(event.target.value);\n  };\n  const calculateGuess = event => {\n    event.preventDefault();\n    if (guessNumber === maxGuesses) {\n      return; // exit if user is out of guesses\n    }\n\n    // 1. Update the letter state of the board \n\n    const guessArray = [...guess]; // spread the guess into an Array\n    const newState = [...boardLetters]; // create a copy of the state, so we don't update state directly\n    newState[guessNumber] = guessArray; // update the copy of the board state with the guess inserted       \n\n    // 2. Evaluate the guess and update the evaluated state\n\n    const evaluatedArray = [...boardEvaluated];\n    const keywordArray = Array.from(keyword);\n    guessArray.forEach((x, index) => {\n      if (x === keywordArray[index]) {\n        evaluatedArray[guessNumber][index] = boardEvals.rightLetter_RightPlace;\n      } else if (keywordArray.some(y => x === y)) {\n        evaluatedArray[guessNumber][index] = boardEvals.rightLetter_WrongPlace;\n      }\n    });\n    setBoardLetters(newState); // update the letter state of the board\n    setGuessNumber(guessNumber + 1); // update the guess number\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [...Array(maxGuesses).keys()].map(arg => {\n        return /*#__PURE__*/_jsxDEV(GuessRow, {\n          id: arg,\n          keywordLetters: keywordLetters\n        }, arg, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"settings\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Letters:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"LettersInput\",\n        type: \"number\",\n        min: 4,\n        max: 8,\n        value: keywordLetters,\n        onChange: updateKeywordLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Guesses:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"GuessesInput\",\n        type: \"number\",\n        min: 2,\n        max: 8,\n        value: maxGuesses,\n        onChange: updateMaxGuesses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"guess\",\n      onSubmit: calculateGuess,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Guess:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        minLength: keywordLetters,\n        maxLength: keywordLetters,\n        onChange: updateGuess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Gameboard, \"A5iX/+rJzTWyA64Sj5xeXDJZg0k=\");\n_c = Gameboard;\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["React","useState","useEffect","getRandomWord","createBoardState","GuessRow","jsxDEV","_jsxDEV","Fragment","_Fragment","Gameboard","_s","startingGuesses","startingLetters","boardEvals","inactive","rightLetter_RightPlace","rightLetter_WrongPlace","wrongLetter_WrongPlace","keywordLetters","setKeywordLetters","maxGuesses","setMaxGuesses","keyword","setKeyword","guessNumber","setGuessNumber","guess","setGuess","boardLetters","setBoardLetters","boardEvaluated","setBoardEvaluated","updateKeywordLetters","event","preventDefault","Number","target","value","updateMaxGuesses","updateGuess","calculateGuess","guessArray","newState","evaluatedArray","keywordArray","Array","from","forEach","x","index","some","y","children","className","keys","map","arg","id","fileName","_jsxFileName","lineNumber","columnNumber","type","min","max","onChange","onSubmit","minLength","maxLength","_c","$RefreshReg$"],"sources":["/Users/mattmogan/Desktop/Projects/WordleFlex/src/components/Gameboard/Gameboard.jsx"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport \"./Gameboard.css\"; \nimport {getRandomWord} from \"../../utilities/api\"\nimport {createBoardState} from \"../../utilities/helpers\"\nimport GuessRow from \"../GuessRow/GuessRow\"\n\nexport default function Gameboard(){\n    \n    const startingGuesses = 6 // default starting guesses (rows)\n    const startingLetters = 5 // default starting letters (columns)\n    const boardEvals = { // object containing board evaluation key / value pairs \n        inactive: \"IA\", \n        rightLetter_RightPlace: \"RR\",\n        rightLetter_WrongPlace: \"RW\",\n        wrongLetter_WrongPlace: \"WW\"\n    }  \n\n    // WordleFlex states\n\n    const [keywordLetters, setKeywordLetters] = useState(startingLetters) // letters in the answer\n    const [maxGuesses, setMaxGuesses] = useState(startingGuesses) // max attempts\n\n    const [keyword, setKeyword] = useState(getRandomWord(keywordLetters)) // the answer\n    const [guessNumber, setGuessNumber] = useState(0) // attempt number\n    const [guess, setGuess] = useState(\"\") // active guess \n\n    const [boardLetters, setBoardLetters] = useState(createBoardState(keywordLetters,maxGuesses,\"\")) // running tally of the guesses across the whole round\n    const [boardEvaluated, setBoardEvaluated] = useState(createBoardState(keywordLetters,maxGuesses,boardEvals.inactive)) \n\n    // keywordLetters update event handler:\n\n    const updateKeywordLetters = (event) => {\n        event.preventDefault()\n        setKeywordLetters(Number(event.target.value))\n    }\n    useEffect(() => { // reset game after keyword letters change\n        setKeyword(getRandomWord(keywordLetters)) // reset keyword\n        setBoardLetters(createBoardState(keywordLetters,maxGuesses,\"\")) // reset boardstate\n        setGuessNumber(0) // reset guess number\n    }, [keywordLetters])\n\n    // maxGuesses update event handler:\n\n    const updateMaxGuesses = (event) => {\n        event.preventDefault()\n        setMaxGuesses(Number(event.target.value)) // reset max guesses\n    }\n    useEffect( () => {\n        setBoardLetters(createBoardState(keywordLetters,maxGuesses,\"\")) // reset boardstate\n        setGuessNumber(0) // reset guess number\n    },[maxGuesses])\n\n    // updateGuess event handler\n\n    const updateGuess = (event) => {\n        event.preventDefault()\n        setGuess(event.target.value)\n    }\n\n    const calculateGuess = (event) => {\n        event.preventDefault()\n        \n        if(guessNumber === maxGuesses){\n            return // exit if user is out of guesses\n        }\n        \n        // 1. Update the letter state of the board \n        \n        const guessArray = [...guess] // spread the guess into an Array\n        const newState = [...boardLetters] // create a copy of the state, so we don't update state directly\n        newState[guessNumber] = guessArray // update the copy of the board state with the guess inserted       \n        \n        // 2. Evaluate the guess and update the evaluated state\n        \n        const evaluatedArray = [...boardEvaluated]\n        const keywordArray = Array.from(keyword)\n\n        guessArray.forEach((x,index) => {\n            if (x === keywordArray[index]) {\n                evaluatedArray[guessNumber][index] = boardEvals.rightLetter_RightPlace\n            } else if (keywordArray.some(y => x === y)) {\n                evaluatedArray[guessNumber][index] = boardEvals.rightLetter_WrongPlace\n            }           \n        })\n\n        setBoardLetters(newState) // update the letter state of the board\n        setGuessNumber(guessNumber+1) // update the guess number\n\n\n    }\n\n    return (\n        <>\n        <div className=\"container\">    \n           {[...Array(maxGuesses).keys()].map((arg) => {\n            return(\n                <GuessRow\n                    key = {arg}\n                    id = {arg}\n                    keywordLetters = {keywordLetters} \n                />\n            )\n           })}\n        </div>\n        <form className=\"settings\">\n            <label>Letters:</label>\n            <input \n                id=\"LettersInput\" \n                type=\"number\" \n                min={4} \n                max={8}\n                value={keywordLetters}\n                onChange={updateKeywordLetters}\n            />\n            <label>Guesses:</label>\n            <input \n                id=\"GuessesInput\" \n                type=\"number\" \n                min={2} \n                max={8}\n                value={maxGuesses}\n                onChange={updateMaxGuesses}\n            />\n        </form>\n        <form className=\"guess\" onSubmit={calculateGuess}>\n            <label>Guess:</label>\n            <input \n                type=\"text\" \n                minLength={keywordLetters} \n                maxLength={keywordLetters}\n                onChange={updateGuess}\n            />\n            <input \n                type=\"submit\" \n                value=\"Guess\"\n            />\n        </form>\n        </>\n    )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}