{"ast":null,"code":"import React,{useState}from\"react\";import\"./Gameboard.css\";import{getRandomWord}from\"../../utilities/api\";import{createBoardState}from\"../../utilities/helpers\";import GuessRow from\"../GuessRow/GuessRow\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";export default function Gameboard(){// WordleFlex states \nconst[keywordLetters,setkeywordLetters]=useState(5);// minimum 3, maximum 8 - letters in the keyword\nconst[keyword,setKeyword]=useState(getRandomWord(5));// this is the word the player is guessing\nconst[guessNumber,setGuessNumber]=useState(1);// this tracks which guess we are on in the game. used to update the guess rows once a guess is evaluated, and check whether the game ends after 5 guesses \nconst[maxGuesses,setMaxGuesses]=useState(5);// players cannot change this, but set to a state variable for future scalability and flexibility\nconst[guess,setGuess]=useState(\"\");// the guess that the player enters, gets updated by the guess form\nconst[boardState,setBoardState]=useState(createBoardState());// running tally of the guesses across the whole round\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:[...Array(maxGuesses).keys()].map(arg=>{return/*#__PURE__*/_jsx(GuessRow,{id:arg,keywordLetters:keywordLetters},arg);})}),/*#__PURE__*/_jsxs(\"form\",{className:\"settings\",children:[/*#__PURE__*/_jsx(\"for\",{children:\"Letters:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",min:3,max:8,defaultValue:5}),/*#__PURE__*/_jsx(\"for\",{children:\"Guesses:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",min:3,max:8,defaultValue:5}),/*#__PURE__*/_jsx(\"input\",{type:\"submit\",value:\"Update\"})]}),/*#__PURE__*/_jsxs(\"form\",{className:\"guess\",children:[/*#__PURE__*/_jsx(\"for\",{children:\"Guess:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",minlength:keywordLetters,maxlength:keywordLetters}),/*#__PURE__*/_jsx(\"input\",{type:\"submit\",value:\"Guess!\"})]})]});}","map":{"version":3,"names":["React","useState","getRandomWord","createBoardState","GuessRow","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Gameboard","keywordLetters","setkeywordLetters","keyword","setKeyword","guessNumber","setGuessNumber","maxGuesses","setMaxGuesses","guess","setGuess","boardState","setBoardState","children","className","Array","keys","map","arg","id","type","min","max","defaultValue","value","minlength","maxlength"],"sources":["/Users/mattmogan/Desktop/Projects/WordleFlex/src/components/Gameboard/Gameboard.jsx"],"sourcesContent":["import React, {useState} from \"react\";\nimport \"./Gameboard.css\"; \nimport {getRandomWord} from \"../../utilities/api\"\nimport {createBoardState} from \"../../utilities/helpers\"\nimport GuessRow from \"../GuessRow/GuessRow\"\n\nexport default function Gameboard(){\n    \n    // WordleFlex states \n    \n    const [keywordLetters, setkeywordLetters] = useState(5) \n    // minimum 3, maximum 8 - letters in the keyword\n    const [keyword, setKeyword] = useState(getRandomWord(5)) \n    // this is the word the player is guessing\n    const [guessNumber, setGuessNumber] = useState(1) \n    // this tracks which guess we are on in the game. used to update the guess rows once a guess is evaluated, and check whether the game ends after 5 guesses \n    const [maxGuesses, setMaxGuesses] = useState(5) \n    // players cannot change this, but set to a state variable for future scalability and flexibility\n    const [guess, setGuess] = useState(\"\")    \n    // the guess that the player enters, gets updated by the guess form\n    const [boardState, setBoardState] = useState(createBoardState())\n    // running tally of the guesses across the whole round\n\n    return (\n        <>\n        <div className=\"container\">    \n           {[...Array(maxGuesses).keys()].map((arg) => {\n            return(\n                <GuessRow\n                    key = {arg}\n                    id = {arg}\n                    keywordLetters = {keywordLetters} \n                />\n            )\n           })}\n        </div>\n        <form className=\"settings\">\n            <for>Letters:</for>\n            <input \n                type=\"number\" \n                min={3} \n                max={8}\n                defaultValue={5}\n            />\n            <for>Guesses:</for>\n            <input \n                type=\"number\" \n                min={3} \n                max={8}\n                defaultValue={5}\n            />\n            <input type=\"submit\" value=\"Update\"/>\n        </form>\n        <form className=\"guess\">\n            <for>Guess:</for>\n            <input \n                type=\"text\" \n                minlength={keywordLetters} \n                maxlength={keywordLetters}\n            />\n            <input type=\"submit\" value=\"Guess!\"/>\n        </form>\n        </>\n    )\n}"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAGC,QAAQ,KAAO,OAAO,CACrC,MAAO,iBAAiB,CACxB,OAAQC,aAAa,KAAO,qBAAqB,CACjD,OAAQC,gBAAgB,KAAO,yBAAyB,CACxD,MAAO,CAAAC,QAAQ,KAAM,sBAAsB,QAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAE3C,cAAe,SAAS,CAAAC,SAASA,CAAA,CAAE,CAE/B;AAEA,KAAM,CAACC,cAAc,CAAEC,iBAAiB,CAAC,CAAGZ,QAAQ,CAAC,CAAC,CAAC,CACvD;AACA,KAAM,CAACa,OAAO,CAAEC,UAAU,CAAC,CAAGd,QAAQ,CAACC,aAAa,CAAC,CAAC,CAAC,CAAC,CACxD;AACA,KAAM,CAACc,WAAW,CAAEC,cAAc,CAAC,CAAGhB,QAAQ,CAAC,CAAC,CAAC,CACjD;AACA,KAAM,CAACiB,UAAU,CAAEC,aAAa,CAAC,CAAGlB,QAAQ,CAAC,CAAC,CAAC,CAC/C;AACA,KAAM,CAACmB,KAAK,CAAEC,QAAQ,CAAC,CAAGpB,QAAQ,CAAC,EAAE,CAAC,CACtC;AACA,KAAM,CAACqB,UAAU,CAAEC,aAAa,CAAC,CAAGtB,QAAQ,CAACE,gBAAgB,CAAC,CAAC,CAAC,CAChE;AAEA,mBACIK,KAAA,CAAAE,SAAA,EAAAc,QAAA,eACAlB,IAAA,QAAKmB,SAAS,CAAC,WAAW,CAAAD,QAAA,CACtB,CAAC,GAAGE,KAAK,CAACR,UAAU,CAAC,CAACS,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAEC,GAAG,EAAK,CAC3C,mBACIvB,IAAA,CAACF,QAAQ,EAEL0B,EAAE,CAAID,GAAI,CACVjB,cAAc,CAAIA,cAAe,EAF1BiB,GAGV,CAAC,CAEP,CAAC,CAAC,CACA,CAAC,cACNrB,KAAA,SAAMiB,SAAS,CAAC,UAAU,CAAAD,QAAA,eACtBlB,IAAA,QAAAkB,QAAA,CAAK,UAAQ,CAAK,CAAC,cACnBlB,IAAA,UACIyB,IAAI,CAAC,QAAQ,CACbC,GAAG,CAAE,CAAE,CACPC,GAAG,CAAE,CAAE,CACPC,YAAY,CAAE,CAAE,CACnB,CAAC,cACF5B,IAAA,QAAAkB,QAAA,CAAK,UAAQ,CAAK,CAAC,cACnBlB,IAAA,UACIyB,IAAI,CAAC,QAAQ,CACbC,GAAG,CAAE,CAAE,CACPC,GAAG,CAAE,CAAE,CACPC,YAAY,CAAE,CAAE,CACnB,CAAC,cACF5B,IAAA,UAAOyB,IAAI,CAAC,QAAQ,CAACI,KAAK,CAAC,QAAQ,CAAC,CAAC,EACnC,CAAC,cACP3B,KAAA,SAAMiB,SAAS,CAAC,OAAO,CAAAD,QAAA,eACnBlB,IAAA,QAAAkB,QAAA,CAAK,QAAM,CAAK,CAAC,cACjBlB,IAAA,UACIyB,IAAI,CAAC,MAAM,CACXK,SAAS,CAAExB,cAAe,CAC1ByB,SAAS,CAAEzB,cAAe,CAC7B,CAAC,cACFN,IAAA,UAAOyB,IAAI,CAAC,QAAQ,CAACI,KAAK,CAAC,QAAQ,CAAC,CAAC,EACnC,CAAC,EACL,CAAC,CAEX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}