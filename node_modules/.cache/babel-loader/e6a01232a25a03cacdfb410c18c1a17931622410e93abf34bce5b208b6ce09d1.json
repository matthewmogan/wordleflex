{"ast":null,"code":"var _jsxFileName = \"/Users/mattmogan/Desktop/Projects/WordleFlex/src/components/Gameboard/Gameboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Gameboard.css\";\nimport { getRandomWord } from \"../../utilities/api\";\nimport { createBoardState } from \"../../utilities/helpers\";\nimport GuessRow from \"../GuessRow/GuessRow\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Gameboard() {\n  _s();\n  const startingGuesses = 6;\n  const startingLetters = 5;\n\n  // WordleFlex states\n\n  const [keywordLetters, setKeywordLetters] = useState(startingLetters); // letters in the answer\n  const [maxGuesses, setMaxGuesses] = useState(startingGuesses); // max attempts\n\n  const [keyword, setKeyword] = useState(getRandomWord(keywordLetters)); // the answer\n  const [guessNumber, setGuessNumber] = useState(0); // attempt number\n  const [guess, setGuess] = useState(\"\"); // active guess \n\n  const [boardState, setBoardState] = useState(createBoardState(keywordLetters, maxGuesses)); // running tally of the guesses across the whole round\n\n  // keywordLetters update event handler:\n\n  const updateKeywordLetters = event => {\n    event.preventDefault();\n    setKeywordLetters(Number(event.target.value));\n  };\n  useEffect(() => {\n    // reset game after keyword letters change\n    setKeyword(getRandomWord(keywordLetters)); // reset keyword\n    setBoardState(createBoardState(keywordLetters, maxGuesses)); // reset boardstate\n    setGuessNumber(0); // reset guess number\n  }, [keywordLetters]);\n\n  // maxGuesses update event handler:\n\n  const updateMaxGuesses = event => {\n    event.preventDefault();\n    setMaxGuesses(Number(event.target.value)); // reset max guesses\n  };\n  useEffect(() => {\n    setBoardState(createBoardState(keywordLetters, maxGuesses)); // reset boardstate\n    setGuessNumber(0); // reset guess number\n  }, [maxGuesses]);\n\n  // updateGuess event handler\n\n  const updateGuess = event => {\n    event.preventDefault();\n    setGuess(event.target.value);\n  };\n  const calculateGuess = event => {\n    event.preventDefault();\n    const guessArray = [...guess];\n    // const newState = [...boardState]\n    // newState[guessNumber] = guessArray        \n    // setBoardState(newState)\n\n    setBoardState(prevState => {\n      prevState.map((row, index) => {\n        index === guessNumber ? [...guessArray] : row;\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [...Array(maxGuesses).keys()].map(arg => {\n        return /*#__PURE__*/_jsxDEV(GuessRow, {\n          id: arg,\n          keywordLetters: keywordLetters\n        }, arg, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"settings\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Letters:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"LettersInput\",\n        type: \"number\",\n        min: 4,\n        max: 8,\n        value: keywordLetters,\n        onChange: updateKeywordLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Guesses:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"GuessesInput\",\n        type: \"number\",\n        min: 2,\n        max: 8,\n        value: maxGuesses,\n        onChange: updateMaxGuesses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"guess\",\n      onSubmit: calculateGuess,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Guess:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        minLength: keywordLetters,\n        maxLength: keywordLetters,\n        onChange: updateGuess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Gameboard, \"TTuzA69gIprJymhSkxyfXjTlQpI=\");\n_c = Gameboard;\nvar _c;\n$RefreshReg$(_c, \"Gameboard\");","map":{"version":3,"names":["React","useState","useEffect","getRandomWord","createBoardState","GuessRow","jsxDEV","_jsxDEV","Fragment","_Fragment","Gameboard","_s","startingGuesses","startingLetters","keywordLetters","setKeywordLetters","maxGuesses","setMaxGuesses","keyword","setKeyword","guessNumber","setGuessNumber","guess","setGuess","boardState","setBoardState","updateKeywordLetters","event","preventDefault","Number","target","value","updateMaxGuesses","updateGuess","calculateGuess","guessArray","prevState","map","row","index","children","className","Array","keys","arg","id","fileName","_jsxFileName","lineNumber","columnNumber","type","min","max","onChange","onSubmit","minLength","maxLength","_c","$RefreshReg$"],"sources":["/Users/mattmogan/Desktop/Projects/WordleFlex/src/components/Gameboard/Gameboard.jsx"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport \"./Gameboard.css\"; \nimport {getRandomWord} from \"../../utilities/api\"\nimport {createBoardState} from \"../../utilities/helpers\"\nimport GuessRow from \"../GuessRow/GuessRow\"\n\nexport default function Gameboard(){\n    \n    const startingGuesses = 6\n    const startingLetters = 5\n\n    // WordleFlex states\n\n    const [keywordLetters, setKeywordLetters] = useState(startingLetters) // letters in the answer\n    const [maxGuesses, setMaxGuesses] = useState(startingGuesses) // max attempts\n\n    const [keyword, setKeyword] = useState(getRandomWord(keywordLetters)) // the answer\n    const [guessNumber, setGuessNumber] = useState(0) // attempt number\n    const [guess, setGuess] = useState(\"\") // active guess \n\n    const [boardState, setBoardState] = useState(createBoardState(keywordLetters,maxGuesses)) // running tally of the guesses across the whole round\n\n    // keywordLetters update event handler:\n\n    const updateKeywordLetters = (event) => {\n        event.preventDefault()\n        setKeywordLetters(Number(event.target.value))\n    }\n    useEffect(() => { // reset game after keyword letters change\n        setKeyword(getRandomWord(keywordLetters)) // reset keyword\n        setBoardState(createBoardState(keywordLetters,maxGuesses)) // reset boardstate\n        setGuessNumber(0) // reset guess number\n    }, [keywordLetters])\n\n    // maxGuesses update event handler:\n\n    const updateMaxGuesses = (event) => {\n        event.preventDefault()\n        setMaxGuesses(Number(event.target.value)) // reset max guesses\n    }\n    useEffect( () => {\n        setBoardState(createBoardState(keywordLetters,maxGuesses)) // reset boardstate\n        setGuessNumber(0) // reset guess number\n    },[maxGuesses])\n\n    // updateGuess event handler\n\n    const updateGuess = (event) => {\n        event.preventDefault()\n        setGuess(event.target.value)\n    }\n\n    const calculateGuess = (event) => {\n        event.preventDefault()\n        const guessArray = [...guess]\n        // const newState = [...boardState]\n        // newState[guessNumber] = guessArray        \n        // setBoardState(newState)\n\n        setBoardState( (prevState) => {\n            prevState.map( (row, index) => {\n                (index === guessNumber) ? [...guessArray] : row\n            } )\n        })  \n    }\n\n    return (\n        <>\n        <div className=\"container\">    \n           {[...Array(maxGuesses).keys()].map((arg) => {\n            return(\n                <GuessRow\n                    key = {arg}\n                    id = {arg}\n                    keywordLetters = {keywordLetters} \n                />\n            )\n           })}\n        </div>\n        <form className=\"settings\">\n            <label>Letters:</label>\n            <input \n                id=\"LettersInput\" \n                type=\"number\" \n                min={4} \n                max={8}\n                value={keywordLetters}\n                onChange={updateKeywordLetters}\n            />\n            <label>Guesses:</label>\n            <input \n                id=\"GuessesInput\" \n                type=\"number\" \n                min={2} \n                max={8}\n                value={maxGuesses}\n                onChange={updateMaxGuesses}\n            />\n        </form>\n        <form className=\"guess\" onSubmit={calculateGuess}>\n            <label>Guess:</label>\n            <input \n                type=\"text\" \n                minLength={keywordLetters} \n                maxLength={keywordLetters}\n                onChange={updateGuess}\n            />\n            <input \n                type=\"submit\" \n                value=\"Guess\"\n            />\n        </form>\n        </>\n    )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}